# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_doa_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_doa_swig')
    _doa_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_doa_swig', [dirname(__file__)])
        except ImportError:
            import _doa_swig
            return _doa_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_doa_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _doa_swig = swig_import_helper()
    del swig_import_helper
else:
    import _doa_swig
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _doa_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _doa_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _doa_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _doa_swig.high_res_timer_epoch()
class autocorrelate(object):
    """Proxy of C++ gr::doa::autocorrelate class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(inputs, snapshot_size, overlap_size, avg_method):
        """make(int inputs, int snapshot_size, int overlap_size, int avg_method) -> autocorrelate_sptr"""
        return _doa_swig.autocorrelate_make(inputs, snapshot_size, overlap_size, avg_method)

    make = staticmethod(make)
    __swig_destroy__ = _doa_swig.delete_autocorrelate
    __del__ = lambda self: None
autocorrelate_swigregister = _doa_swig.autocorrelate_swigregister
autocorrelate_swigregister(autocorrelate)

def autocorrelate_make(inputs, snapshot_size, overlap_size, avg_method):
    """autocorrelate_make(int inputs, int snapshot_size, int overlap_size, int avg_method) -> autocorrelate_sptr"""
    return _doa_swig.autocorrelate_make(inputs, snapshot_size, overlap_size, avg_method)

class autocorrelate_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::doa::autocorrelate)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::doa::autocorrelate)> self) -> autocorrelate_sptr
        __init__(boost::shared_ptr<(gr::doa::autocorrelate)> self, autocorrelate p) -> autocorrelate_sptr
        """
        this = _doa_swig.new_autocorrelate_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(autocorrelate_sptr self) -> autocorrelate"""
        return _doa_swig.autocorrelate_sptr___deref__(self)

    __swig_destroy__ = _doa_swig.delete_autocorrelate_sptr
    __del__ = lambda self: None

    def make(self, inputs, snapshot_size, overlap_size, avg_method):
        """make(autocorrelate_sptr self, int inputs, int snapshot_size, int overlap_size, int avg_method) -> autocorrelate_sptr"""
        return _doa_swig.autocorrelate_sptr_make(self, inputs, snapshot_size, overlap_size, avg_method)


    def history(self):
        """history(autocorrelate_sptr self) -> unsigned int"""
        return _doa_swig.autocorrelate_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(autocorrelate_sptr self, int which, int delay)
        declare_sample_delay(autocorrelate_sptr self, unsigned int delay)
        """
        return _doa_swig.autocorrelate_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(autocorrelate_sptr self, int which) -> unsigned int"""
        return _doa_swig.autocorrelate_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(autocorrelate_sptr self) -> int"""
        return _doa_swig.autocorrelate_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(autocorrelate_sptr self) -> double"""
        return _doa_swig.autocorrelate_sptr_relative_rate(self)


    def start(self):
        """start(autocorrelate_sptr self) -> bool"""
        return _doa_swig.autocorrelate_sptr_start(self)


    def stop(self):
        """stop(autocorrelate_sptr self) -> bool"""
        return _doa_swig.autocorrelate_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(autocorrelate_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.autocorrelate_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(autocorrelate_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.autocorrelate_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(autocorrelate_sptr self) -> int"""
        return _doa_swig.autocorrelate_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(autocorrelate_sptr self, int m)"""
        return _doa_swig.autocorrelate_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(autocorrelate_sptr self)"""
        return _doa_swig.autocorrelate_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(autocorrelate_sptr self) -> bool"""
        return _doa_swig.autocorrelate_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(autocorrelate_sptr self, int m)"""
        return _doa_swig.autocorrelate_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(autocorrelate_sptr self) -> int"""
        return _doa_swig.autocorrelate_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(autocorrelate_sptr self, int i) -> long"""
        return _doa_swig.autocorrelate_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(autocorrelate_sptr self, long max_output_buffer)
        set_max_output_buffer(autocorrelate_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.autocorrelate_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(autocorrelate_sptr self, int i) -> long"""
        return _doa_swig.autocorrelate_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(autocorrelate_sptr self, long min_output_buffer)
        set_min_output_buffer(autocorrelate_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.autocorrelate_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(autocorrelate_sptr self) -> float"""
        return _doa_swig.autocorrelate_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(autocorrelate_sptr self) -> float"""
        return _doa_swig.autocorrelate_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(autocorrelate_sptr self) -> float"""
        return _doa_swig.autocorrelate_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(autocorrelate_sptr self) -> float"""
        return _doa_swig.autocorrelate_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(autocorrelate_sptr self) -> float"""
        return _doa_swig.autocorrelate_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(autocorrelate_sptr self) -> float"""
        return _doa_swig.autocorrelate_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(autocorrelate_sptr self, int which) -> float
        pc_input_buffers_full(autocorrelate_sptr self) -> pmt_vector_float
        """
        return _doa_swig.autocorrelate_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(autocorrelate_sptr self, int which) -> float
        pc_input_buffers_full_avg(autocorrelate_sptr self) -> pmt_vector_float
        """
        return _doa_swig.autocorrelate_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(autocorrelate_sptr self, int which) -> float
        pc_input_buffers_full_var(autocorrelate_sptr self) -> pmt_vector_float
        """
        return _doa_swig.autocorrelate_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(autocorrelate_sptr self, int which) -> float
        pc_output_buffers_full(autocorrelate_sptr self) -> pmt_vector_float
        """
        return _doa_swig.autocorrelate_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(autocorrelate_sptr self, int which) -> float
        pc_output_buffers_full_avg(autocorrelate_sptr self) -> pmt_vector_float
        """
        return _doa_swig.autocorrelate_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(autocorrelate_sptr self, int which) -> float
        pc_output_buffers_full_var(autocorrelate_sptr self) -> pmt_vector_float
        """
        return _doa_swig.autocorrelate_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(autocorrelate_sptr self) -> float"""
        return _doa_swig.autocorrelate_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(autocorrelate_sptr self) -> float"""
        return _doa_swig.autocorrelate_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(autocorrelate_sptr self) -> float"""
        return _doa_swig.autocorrelate_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(autocorrelate_sptr self) -> float"""
        return _doa_swig.autocorrelate_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(autocorrelate_sptr self) -> float"""
        return _doa_swig.autocorrelate_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(autocorrelate_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.autocorrelate_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(autocorrelate_sptr self)"""
        return _doa_swig.autocorrelate_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(autocorrelate_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.autocorrelate_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(autocorrelate_sptr self) -> int"""
        return _doa_swig.autocorrelate_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(autocorrelate_sptr self) -> int"""
        return _doa_swig.autocorrelate_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(autocorrelate_sptr self, int priority) -> int"""
        return _doa_swig.autocorrelate_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(autocorrelate_sptr self) -> std::string"""
        return _doa_swig.autocorrelate_sptr_name(self)


    def symbol_name(self):
        """symbol_name(autocorrelate_sptr self) -> std::string"""
        return _doa_swig.autocorrelate_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(autocorrelate_sptr self) -> io_signature_sptr"""
        return _doa_swig.autocorrelate_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(autocorrelate_sptr self) -> io_signature_sptr"""
        return _doa_swig.autocorrelate_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(autocorrelate_sptr self) -> long"""
        return _doa_swig.autocorrelate_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(autocorrelate_sptr self) -> basic_block_sptr"""
        return _doa_swig.autocorrelate_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(autocorrelate_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.autocorrelate_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(autocorrelate_sptr self) -> std::string"""
        return _doa_swig.autocorrelate_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(autocorrelate_sptr self, std::string name)"""
        return _doa_swig.autocorrelate_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(autocorrelate_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _doa_swig.autocorrelate_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(autocorrelate_sptr self) -> swig_int_ptr"""
        return _doa_swig.autocorrelate_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(autocorrelate_sptr self) -> swig_int_ptr"""
        return _doa_swig.autocorrelate_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(autocorrelate_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _doa_swig.autocorrelate_sptr_message_subscribers(self, which_port)

autocorrelate_sptr_swigregister = _doa_swig.autocorrelate_sptr_swigregister
autocorrelate_sptr_swigregister(autocorrelate_sptr)


autocorrelate_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
autocorrelate = autocorrelate.make;

class MUSIC_lin_array(object):
    """Proxy of C++ gr::doa::MUSIC_lin_array class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(norm_spacing, num_targets, num_ant_ele, pspectrum_len):
        """make(float norm_spacing, int num_targets, int num_ant_ele, int pspectrum_len) -> MUSIC_lin_array_sptr"""
        return _doa_swig.MUSIC_lin_array_make(norm_spacing, num_targets, num_ant_ele, pspectrum_len)

    make = staticmethod(make)
    __swig_destroy__ = _doa_swig.delete_MUSIC_lin_array
    __del__ = lambda self: None
MUSIC_lin_array_swigregister = _doa_swig.MUSIC_lin_array_swigregister
MUSIC_lin_array_swigregister(MUSIC_lin_array)

def MUSIC_lin_array_make(norm_spacing, num_targets, num_ant_ele, pspectrum_len):
    """MUSIC_lin_array_make(float norm_spacing, int num_targets, int num_ant_ele, int pspectrum_len) -> MUSIC_lin_array_sptr"""
    return _doa_swig.MUSIC_lin_array_make(norm_spacing, num_targets, num_ant_ele, pspectrum_len)

class MUSIC_lin_array_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::doa::MUSIC_lin_array)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::doa::MUSIC_lin_array)> self) -> MUSIC_lin_array_sptr
        __init__(boost::shared_ptr<(gr::doa::MUSIC_lin_array)> self, MUSIC_lin_array p) -> MUSIC_lin_array_sptr
        """
        this = _doa_swig.new_MUSIC_lin_array_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(MUSIC_lin_array_sptr self) -> MUSIC_lin_array"""
        return _doa_swig.MUSIC_lin_array_sptr___deref__(self)

    __swig_destroy__ = _doa_swig.delete_MUSIC_lin_array_sptr
    __del__ = lambda self: None

    def make(self, norm_spacing, num_targets, num_ant_ele, pspectrum_len):
        """make(MUSIC_lin_array_sptr self, float norm_spacing, int num_targets, int num_ant_ele, int pspectrum_len) -> MUSIC_lin_array_sptr"""
        return _doa_swig.MUSIC_lin_array_sptr_make(self, norm_spacing, num_targets, num_ant_ele, pspectrum_len)


    def history(self):
        """history(MUSIC_lin_array_sptr self) -> unsigned int"""
        return _doa_swig.MUSIC_lin_array_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(MUSIC_lin_array_sptr self, int which, int delay)
        declare_sample_delay(MUSIC_lin_array_sptr self, unsigned int delay)
        """
        return _doa_swig.MUSIC_lin_array_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(MUSIC_lin_array_sptr self, int which) -> unsigned int"""
        return _doa_swig.MUSIC_lin_array_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(MUSIC_lin_array_sptr self) -> int"""
        return _doa_swig.MUSIC_lin_array_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(MUSIC_lin_array_sptr self) -> double"""
        return _doa_swig.MUSIC_lin_array_sptr_relative_rate(self)


    def start(self):
        """start(MUSIC_lin_array_sptr self) -> bool"""
        return _doa_swig.MUSIC_lin_array_sptr_start(self)


    def stop(self):
        """stop(MUSIC_lin_array_sptr self) -> bool"""
        return _doa_swig.MUSIC_lin_array_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(MUSIC_lin_array_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.MUSIC_lin_array_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(MUSIC_lin_array_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.MUSIC_lin_array_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(MUSIC_lin_array_sptr self) -> int"""
        return _doa_swig.MUSIC_lin_array_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(MUSIC_lin_array_sptr self, int m)"""
        return _doa_swig.MUSIC_lin_array_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(MUSIC_lin_array_sptr self)"""
        return _doa_swig.MUSIC_lin_array_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(MUSIC_lin_array_sptr self) -> bool"""
        return _doa_swig.MUSIC_lin_array_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(MUSIC_lin_array_sptr self, int m)"""
        return _doa_swig.MUSIC_lin_array_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(MUSIC_lin_array_sptr self) -> int"""
        return _doa_swig.MUSIC_lin_array_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(MUSIC_lin_array_sptr self, int i) -> long"""
        return _doa_swig.MUSIC_lin_array_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(MUSIC_lin_array_sptr self, long max_output_buffer)
        set_max_output_buffer(MUSIC_lin_array_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.MUSIC_lin_array_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(MUSIC_lin_array_sptr self, int i) -> long"""
        return _doa_swig.MUSIC_lin_array_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(MUSIC_lin_array_sptr self, long min_output_buffer)
        set_min_output_buffer(MUSIC_lin_array_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.MUSIC_lin_array_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(MUSIC_lin_array_sptr self) -> float"""
        return _doa_swig.MUSIC_lin_array_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(MUSIC_lin_array_sptr self) -> float"""
        return _doa_swig.MUSIC_lin_array_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(MUSIC_lin_array_sptr self) -> float"""
        return _doa_swig.MUSIC_lin_array_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(MUSIC_lin_array_sptr self) -> float"""
        return _doa_swig.MUSIC_lin_array_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(MUSIC_lin_array_sptr self) -> float"""
        return _doa_swig.MUSIC_lin_array_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(MUSIC_lin_array_sptr self) -> float"""
        return _doa_swig.MUSIC_lin_array_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(MUSIC_lin_array_sptr self, int which) -> float
        pc_input_buffers_full(MUSIC_lin_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.MUSIC_lin_array_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(MUSIC_lin_array_sptr self, int which) -> float
        pc_input_buffers_full_avg(MUSIC_lin_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.MUSIC_lin_array_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(MUSIC_lin_array_sptr self, int which) -> float
        pc_input_buffers_full_var(MUSIC_lin_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.MUSIC_lin_array_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(MUSIC_lin_array_sptr self, int which) -> float
        pc_output_buffers_full(MUSIC_lin_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.MUSIC_lin_array_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(MUSIC_lin_array_sptr self, int which) -> float
        pc_output_buffers_full_avg(MUSIC_lin_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.MUSIC_lin_array_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(MUSIC_lin_array_sptr self, int which) -> float
        pc_output_buffers_full_var(MUSIC_lin_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.MUSIC_lin_array_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(MUSIC_lin_array_sptr self) -> float"""
        return _doa_swig.MUSIC_lin_array_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(MUSIC_lin_array_sptr self) -> float"""
        return _doa_swig.MUSIC_lin_array_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(MUSIC_lin_array_sptr self) -> float"""
        return _doa_swig.MUSIC_lin_array_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(MUSIC_lin_array_sptr self) -> float"""
        return _doa_swig.MUSIC_lin_array_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(MUSIC_lin_array_sptr self) -> float"""
        return _doa_swig.MUSIC_lin_array_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(MUSIC_lin_array_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.MUSIC_lin_array_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(MUSIC_lin_array_sptr self)"""
        return _doa_swig.MUSIC_lin_array_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(MUSIC_lin_array_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.MUSIC_lin_array_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(MUSIC_lin_array_sptr self) -> int"""
        return _doa_swig.MUSIC_lin_array_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(MUSIC_lin_array_sptr self) -> int"""
        return _doa_swig.MUSIC_lin_array_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(MUSIC_lin_array_sptr self, int priority) -> int"""
        return _doa_swig.MUSIC_lin_array_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(MUSIC_lin_array_sptr self) -> std::string"""
        return _doa_swig.MUSIC_lin_array_sptr_name(self)


    def symbol_name(self):
        """symbol_name(MUSIC_lin_array_sptr self) -> std::string"""
        return _doa_swig.MUSIC_lin_array_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(MUSIC_lin_array_sptr self) -> io_signature_sptr"""
        return _doa_swig.MUSIC_lin_array_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(MUSIC_lin_array_sptr self) -> io_signature_sptr"""
        return _doa_swig.MUSIC_lin_array_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(MUSIC_lin_array_sptr self) -> long"""
        return _doa_swig.MUSIC_lin_array_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(MUSIC_lin_array_sptr self) -> basic_block_sptr"""
        return _doa_swig.MUSIC_lin_array_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(MUSIC_lin_array_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.MUSIC_lin_array_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(MUSIC_lin_array_sptr self) -> std::string"""
        return _doa_swig.MUSIC_lin_array_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(MUSIC_lin_array_sptr self, std::string name)"""
        return _doa_swig.MUSIC_lin_array_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(MUSIC_lin_array_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _doa_swig.MUSIC_lin_array_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(MUSIC_lin_array_sptr self) -> swig_int_ptr"""
        return _doa_swig.MUSIC_lin_array_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(MUSIC_lin_array_sptr self) -> swig_int_ptr"""
        return _doa_swig.MUSIC_lin_array_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(MUSIC_lin_array_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _doa_swig.MUSIC_lin_array_sptr_message_subscribers(self, which_port)

MUSIC_lin_array_sptr_swigregister = _doa_swig.MUSIC_lin_array_sptr_swigregister
MUSIC_lin_array_sptr_swigregister(MUSIC_lin_array_sptr)


MUSIC_lin_array_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
MUSIC_lin_array = MUSIC_lin_array.make;

class rootMUSIC_linear_array(object):
    """Proxy of C++ gr::doa::rootMUSIC_linear_array class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(norm_spacing, num_targets, num_ant_ele):
        """make(float norm_spacing, int num_targets, int num_ant_ele) -> rootMUSIC_linear_array_sptr"""
        return _doa_swig.rootMUSIC_linear_array_make(norm_spacing, num_targets, num_ant_ele)

    make = staticmethod(make)
    __swig_destroy__ = _doa_swig.delete_rootMUSIC_linear_array
    __del__ = lambda self: None
rootMUSIC_linear_array_swigregister = _doa_swig.rootMUSIC_linear_array_swigregister
rootMUSIC_linear_array_swigregister(rootMUSIC_linear_array)

def rootMUSIC_linear_array_make(norm_spacing, num_targets, num_ant_ele):
    """rootMUSIC_linear_array_make(float norm_spacing, int num_targets, int num_ant_ele) -> rootMUSIC_linear_array_sptr"""
    return _doa_swig.rootMUSIC_linear_array_make(norm_spacing, num_targets, num_ant_ele)

class rootMUSIC_linear_array_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::doa::rootMUSIC_linear_array)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::doa::rootMUSIC_linear_array)> self) -> rootMUSIC_linear_array_sptr
        __init__(boost::shared_ptr<(gr::doa::rootMUSIC_linear_array)> self, rootMUSIC_linear_array p) -> rootMUSIC_linear_array_sptr
        """
        this = _doa_swig.new_rootMUSIC_linear_array_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(rootMUSIC_linear_array_sptr self) -> rootMUSIC_linear_array"""
        return _doa_swig.rootMUSIC_linear_array_sptr___deref__(self)

    __swig_destroy__ = _doa_swig.delete_rootMUSIC_linear_array_sptr
    __del__ = lambda self: None

    def make(self, norm_spacing, num_targets, num_ant_ele):
        """make(rootMUSIC_linear_array_sptr self, float norm_spacing, int num_targets, int num_ant_ele) -> rootMUSIC_linear_array_sptr"""
        return _doa_swig.rootMUSIC_linear_array_sptr_make(self, norm_spacing, num_targets, num_ant_ele)


    def history(self):
        """history(rootMUSIC_linear_array_sptr self) -> unsigned int"""
        return _doa_swig.rootMUSIC_linear_array_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(rootMUSIC_linear_array_sptr self, int which, int delay)
        declare_sample_delay(rootMUSIC_linear_array_sptr self, unsigned int delay)
        """
        return _doa_swig.rootMUSIC_linear_array_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(rootMUSIC_linear_array_sptr self, int which) -> unsigned int"""
        return _doa_swig.rootMUSIC_linear_array_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(rootMUSIC_linear_array_sptr self) -> int"""
        return _doa_swig.rootMUSIC_linear_array_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(rootMUSIC_linear_array_sptr self) -> double"""
        return _doa_swig.rootMUSIC_linear_array_sptr_relative_rate(self)


    def start(self):
        """start(rootMUSIC_linear_array_sptr self) -> bool"""
        return _doa_swig.rootMUSIC_linear_array_sptr_start(self)


    def stop(self):
        """stop(rootMUSIC_linear_array_sptr self) -> bool"""
        return _doa_swig.rootMUSIC_linear_array_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(rootMUSIC_linear_array_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.rootMUSIC_linear_array_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(rootMUSIC_linear_array_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.rootMUSIC_linear_array_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(rootMUSIC_linear_array_sptr self) -> int"""
        return _doa_swig.rootMUSIC_linear_array_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(rootMUSIC_linear_array_sptr self, int m)"""
        return _doa_swig.rootMUSIC_linear_array_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(rootMUSIC_linear_array_sptr self)"""
        return _doa_swig.rootMUSIC_linear_array_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(rootMUSIC_linear_array_sptr self) -> bool"""
        return _doa_swig.rootMUSIC_linear_array_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(rootMUSIC_linear_array_sptr self, int m)"""
        return _doa_swig.rootMUSIC_linear_array_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(rootMUSIC_linear_array_sptr self) -> int"""
        return _doa_swig.rootMUSIC_linear_array_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(rootMUSIC_linear_array_sptr self, int i) -> long"""
        return _doa_swig.rootMUSIC_linear_array_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(rootMUSIC_linear_array_sptr self, long max_output_buffer)
        set_max_output_buffer(rootMUSIC_linear_array_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.rootMUSIC_linear_array_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(rootMUSIC_linear_array_sptr self, int i) -> long"""
        return _doa_swig.rootMUSIC_linear_array_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(rootMUSIC_linear_array_sptr self, long min_output_buffer)
        set_min_output_buffer(rootMUSIC_linear_array_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.rootMUSIC_linear_array_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(rootMUSIC_linear_array_sptr self) -> float"""
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(rootMUSIC_linear_array_sptr self) -> float"""
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(rootMUSIC_linear_array_sptr self) -> float"""
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(rootMUSIC_linear_array_sptr self) -> float"""
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(rootMUSIC_linear_array_sptr self) -> float"""
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(rootMUSIC_linear_array_sptr self) -> float"""
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(rootMUSIC_linear_array_sptr self, int which) -> float
        pc_input_buffers_full(rootMUSIC_linear_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(rootMUSIC_linear_array_sptr self, int which) -> float
        pc_input_buffers_full_avg(rootMUSIC_linear_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(rootMUSIC_linear_array_sptr self, int which) -> float
        pc_input_buffers_full_var(rootMUSIC_linear_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(rootMUSIC_linear_array_sptr self, int which) -> float
        pc_output_buffers_full(rootMUSIC_linear_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(rootMUSIC_linear_array_sptr self, int which) -> float
        pc_output_buffers_full_avg(rootMUSIC_linear_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(rootMUSIC_linear_array_sptr self, int which) -> float
        pc_output_buffers_full_var(rootMUSIC_linear_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(rootMUSIC_linear_array_sptr self) -> float"""
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(rootMUSIC_linear_array_sptr self) -> float"""
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(rootMUSIC_linear_array_sptr self) -> float"""
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(rootMUSIC_linear_array_sptr self) -> float"""
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(rootMUSIC_linear_array_sptr self) -> float"""
        return _doa_swig.rootMUSIC_linear_array_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(rootMUSIC_linear_array_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.rootMUSIC_linear_array_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(rootMUSIC_linear_array_sptr self)"""
        return _doa_swig.rootMUSIC_linear_array_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(rootMUSIC_linear_array_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.rootMUSIC_linear_array_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(rootMUSIC_linear_array_sptr self) -> int"""
        return _doa_swig.rootMUSIC_linear_array_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(rootMUSIC_linear_array_sptr self) -> int"""
        return _doa_swig.rootMUSIC_linear_array_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(rootMUSIC_linear_array_sptr self, int priority) -> int"""
        return _doa_swig.rootMUSIC_linear_array_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(rootMUSIC_linear_array_sptr self) -> std::string"""
        return _doa_swig.rootMUSIC_linear_array_sptr_name(self)


    def symbol_name(self):
        """symbol_name(rootMUSIC_linear_array_sptr self) -> std::string"""
        return _doa_swig.rootMUSIC_linear_array_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(rootMUSIC_linear_array_sptr self) -> io_signature_sptr"""
        return _doa_swig.rootMUSIC_linear_array_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(rootMUSIC_linear_array_sptr self) -> io_signature_sptr"""
        return _doa_swig.rootMUSIC_linear_array_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(rootMUSIC_linear_array_sptr self) -> long"""
        return _doa_swig.rootMUSIC_linear_array_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(rootMUSIC_linear_array_sptr self) -> basic_block_sptr"""
        return _doa_swig.rootMUSIC_linear_array_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(rootMUSIC_linear_array_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.rootMUSIC_linear_array_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(rootMUSIC_linear_array_sptr self) -> std::string"""
        return _doa_swig.rootMUSIC_linear_array_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(rootMUSIC_linear_array_sptr self, std::string name)"""
        return _doa_swig.rootMUSIC_linear_array_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(rootMUSIC_linear_array_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _doa_swig.rootMUSIC_linear_array_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(rootMUSIC_linear_array_sptr self) -> swig_int_ptr"""
        return _doa_swig.rootMUSIC_linear_array_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(rootMUSIC_linear_array_sptr self) -> swig_int_ptr"""
        return _doa_swig.rootMUSIC_linear_array_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(rootMUSIC_linear_array_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _doa_swig.rootMUSIC_linear_array_sptr_message_subscribers(self, which_port)

rootMUSIC_linear_array_sptr_swigregister = _doa_swig.rootMUSIC_linear_array_sptr_swigregister
rootMUSIC_linear_array_sptr_swigregister(rootMUSIC_linear_array_sptr)


rootMUSIC_linear_array_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rootMUSIC_linear_array = rootMUSIC_linear_array.make;

class antenna_correction(object):
    """Proxy of C++ gr::doa::antenna_correction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(num_ant_ele, config_filename):
        """make(int num_ant_ele, char * config_filename) -> antenna_correction_sptr"""
        return _doa_swig.antenna_correction_make(num_ant_ele, config_filename)

    make = staticmethod(make)
    __swig_destroy__ = _doa_swig.delete_antenna_correction
    __del__ = lambda self: None
antenna_correction_swigregister = _doa_swig.antenna_correction_swigregister
antenna_correction_swigregister(antenna_correction)

def antenna_correction_make(num_ant_ele, config_filename):
    """antenna_correction_make(int num_ant_ele, char * config_filename) -> antenna_correction_sptr"""
    return _doa_swig.antenna_correction_make(num_ant_ele, config_filename)

class antenna_correction_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::doa::antenna_correction)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::doa::antenna_correction)> self) -> antenna_correction_sptr
        __init__(boost::shared_ptr<(gr::doa::antenna_correction)> self, antenna_correction p) -> antenna_correction_sptr
        """
        this = _doa_swig.new_antenna_correction_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(antenna_correction_sptr self) -> antenna_correction"""
        return _doa_swig.antenna_correction_sptr___deref__(self)

    __swig_destroy__ = _doa_swig.delete_antenna_correction_sptr
    __del__ = lambda self: None

    def make(self, num_ant_ele, config_filename):
        """make(antenna_correction_sptr self, int num_ant_ele, char * config_filename) -> antenna_correction_sptr"""
        return _doa_swig.antenna_correction_sptr_make(self, num_ant_ele, config_filename)


    def history(self):
        """history(antenna_correction_sptr self) -> unsigned int"""
        return _doa_swig.antenna_correction_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(antenna_correction_sptr self, int which, int delay)
        declare_sample_delay(antenna_correction_sptr self, unsigned int delay)
        """
        return _doa_swig.antenna_correction_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(antenna_correction_sptr self, int which) -> unsigned int"""
        return _doa_swig.antenna_correction_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(antenna_correction_sptr self) -> int"""
        return _doa_swig.antenna_correction_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(antenna_correction_sptr self) -> double"""
        return _doa_swig.antenna_correction_sptr_relative_rate(self)


    def start(self):
        """start(antenna_correction_sptr self) -> bool"""
        return _doa_swig.antenna_correction_sptr_start(self)


    def stop(self):
        """stop(antenna_correction_sptr self) -> bool"""
        return _doa_swig.antenna_correction_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(antenna_correction_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.antenna_correction_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(antenna_correction_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.antenna_correction_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(antenna_correction_sptr self) -> int"""
        return _doa_swig.antenna_correction_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(antenna_correction_sptr self, int m)"""
        return _doa_swig.antenna_correction_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(antenna_correction_sptr self)"""
        return _doa_swig.antenna_correction_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(antenna_correction_sptr self) -> bool"""
        return _doa_swig.antenna_correction_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(antenna_correction_sptr self, int m)"""
        return _doa_swig.antenna_correction_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(antenna_correction_sptr self) -> int"""
        return _doa_swig.antenna_correction_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(antenna_correction_sptr self, int i) -> long"""
        return _doa_swig.antenna_correction_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(antenna_correction_sptr self, long max_output_buffer)
        set_max_output_buffer(antenna_correction_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.antenna_correction_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(antenna_correction_sptr self, int i) -> long"""
        return _doa_swig.antenna_correction_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(antenna_correction_sptr self, long min_output_buffer)
        set_min_output_buffer(antenna_correction_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.antenna_correction_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(antenna_correction_sptr self) -> float"""
        return _doa_swig.antenna_correction_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(antenna_correction_sptr self) -> float"""
        return _doa_swig.antenna_correction_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(antenna_correction_sptr self) -> float"""
        return _doa_swig.antenna_correction_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(antenna_correction_sptr self) -> float"""
        return _doa_swig.antenna_correction_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(antenna_correction_sptr self) -> float"""
        return _doa_swig.antenna_correction_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(antenna_correction_sptr self) -> float"""
        return _doa_swig.antenna_correction_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(antenna_correction_sptr self, int which) -> float
        pc_input_buffers_full(antenna_correction_sptr self) -> pmt_vector_float
        """
        return _doa_swig.antenna_correction_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(antenna_correction_sptr self, int which) -> float
        pc_input_buffers_full_avg(antenna_correction_sptr self) -> pmt_vector_float
        """
        return _doa_swig.antenna_correction_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(antenna_correction_sptr self, int which) -> float
        pc_input_buffers_full_var(antenna_correction_sptr self) -> pmt_vector_float
        """
        return _doa_swig.antenna_correction_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(antenna_correction_sptr self, int which) -> float
        pc_output_buffers_full(antenna_correction_sptr self) -> pmt_vector_float
        """
        return _doa_swig.antenna_correction_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(antenna_correction_sptr self, int which) -> float
        pc_output_buffers_full_avg(antenna_correction_sptr self) -> pmt_vector_float
        """
        return _doa_swig.antenna_correction_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(antenna_correction_sptr self, int which) -> float
        pc_output_buffers_full_var(antenna_correction_sptr self) -> pmt_vector_float
        """
        return _doa_swig.antenna_correction_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(antenna_correction_sptr self) -> float"""
        return _doa_swig.antenna_correction_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(antenna_correction_sptr self) -> float"""
        return _doa_swig.antenna_correction_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(antenna_correction_sptr self) -> float"""
        return _doa_swig.antenna_correction_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(antenna_correction_sptr self) -> float"""
        return _doa_swig.antenna_correction_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(antenna_correction_sptr self) -> float"""
        return _doa_swig.antenna_correction_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(antenna_correction_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.antenna_correction_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(antenna_correction_sptr self)"""
        return _doa_swig.antenna_correction_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(antenna_correction_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.antenna_correction_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(antenna_correction_sptr self) -> int"""
        return _doa_swig.antenna_correction_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(antenna_correction_sptr self) -> int"""
        return _doa_swig.antenna_correction_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(antenna_correction_sptr self, int priority) -> int"""
        return _doa_swig.antenna_correction_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(antenna_correction_sptr self) -> std::string"""
        return _doa_swig.antenna_correction_sptr_name(self)


    def symbol_name(self):
        """symbol_name(antenna_correction_sptr self) -> std::string"""
        return _doa_swig.antenna_correction_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(antenna_correction_sptr self) -> io_signature_sptr"""
        return _doa_swig.antenna_correction_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(antenna_correction_sptr self) -> io_signature_sptr"""
        return _doa_swig.antenna_correction_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(antenna_correction_sptr self) -> long"""
        return _doa_swig.antenna_correction_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(antenna_correction_sptr self) -> basic_block_sptr"""
        return _doa_swig.antenna_correction_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(antenna_correction_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.antenna_correction_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(antenna_correction_sptr self) -> std::string"""
        return _doa_swig.antenna_correction_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(antenna_correction_sptr self, std::string name)"""
        return _doa_swig.antenna_correction_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(antenna_correction_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _doa_swig.antenna_correction_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(antenna_correction_sptr self) -> swig_int_ptr"""
        return _doa_swig.antenna_correction_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(antenna_correction_sptr self) -> swig_int_ptr"""
        return _doa_swig.antenna_correction_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(antenna_correction_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _doa_swig.antenna_correction_sptr_message_subscribers(self, which_port)

antenna_correction_sptr_swigregister = _doa_swig.antenna_correction_sptr_swigregister
antenna_correction_sptr_swigregister(antenna_correction_sptr)


antenna_correction_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
antenna_correction = antenna_correction.make;

class find_local_max(object):
    """Proxy of C++ gr::doa::find_local_max class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(num_max_vals, vector_len, x_min, x_max):
        """make(int num_max_vals, int vector_len, float x_min, float x_max) -> find_local_max_sptr"""
        return _doa_swig.find_local_max_make(num_max_vals, vector_len, x_min, x_max)

    make = staticmethod(make)
    __swig_destroy__ = _doa_swig.delete_find_local_max
    __del__ = lambda self: None
find_local_max_swigregister = _doa_swig.find_local_max_swigregister
find_local_max_swigregister(find_local_max)

def find_local_max_make(num_max_vals, vector_len, x_min, x_max):
    """find_local_max_make(int num_max_vals, int vector_len, float x_min, float x_max) -> find_local_max_sptr"""
    return _doa_swig.find_local_max_make(num_max_vals, vector_len, x_min, x_max)

class find_local_max_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::doa::find_local_max)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::doa::find_local_max)> self) -> find_local_max_sptr
        __init__(boost::shared_ptr<(gr::doa::find_local_max)> self, find_local_max p) -> find_local_max_sptr
        """
        this = _doa_swig.new_find_local_max_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(find_local_max_sptr self) -> find_local_max"""
        return _doa_swig.find_local_max_sptr___deref__(self)

    __swig_destroy__ = _doa_swig.delete_find_local_max_sptr
    __del__ = lambda self: None

    def make(self, num_max_vals, vector_len, x_min, x_max):
        """make(find_local_max_sptr self, int num_max_vals, int vector_len, float x_min, float x_max) -> find_local_max_sptr"""
        return _doa_swig.find_local_max_sptr_make(self, num_max_vals, vector_len, x_min, x_max)


    def history(self):
        """history(find_local_max_sptr self) -> unsigned int"""
        return _doa_swig.find_local_max_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(find_local_max_sptr self, int which, int delay)
        declare_sample_delay(find_local_max_sptr self, unsigned int delay)
        """
        return _doa_swig.find_local_max_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(find_local_max_sptr self, int which) -> unsigned int"""
        return _doa_swig.find_local_max_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(find_local_max_sptr self) -> int"""
        return _doa_swig.find_local_max_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(find_local_max_sptr self) -> double"""
        return _doa_swig.find_local_max_sptr_relative_rate(self)


    def start(self):
        """start(find_local_max_sptr self) -> bool"""
        return _doa_swig.find_local_max_sptr_start(self)


    def stop(self):
        """stop(find_local_max_sptr self) -> bool"""
        return _doa_swig.find_local_max_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(find_local_max_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.find_local_max_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(find_local_max_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.find_local_max_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(find_local_max_sptr self) -> int"""
        return _doa_swig.find_local_max_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(find_local_max_sptr self, int m)"""
        return _doa_swig.find_local_max_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(find_local_max_sptr self)"""
        return _doa_swig.find_local_max_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(find_local_max_sptr self) -> bool"""
        return _doa_swig.find_local_max_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(find_local_max_sptr self, int m)"""
        return _doa_swig.find_local_max_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(find_local_max_sptr self) -> int"""
        return _doa_swig.find_local_max_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(find_local_max_sptr self, int i) -> long"""
        return _doa_swig.find_local_max_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(find_local_max_sptr self, long max_output_buffer)
        set_max_output_buffer(find_local_max_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.find_local_max_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(find_local_max_sptr self, int i) -> long"""
        return _doa_swig.find_local_max_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(find_local_max_sptr self, long min_output_buffer)
        set_min_output_buffer(find_local_max_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.find_local_max_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(find_local_max_sptr self) -> float"""
        return _doa_swig.find_local_max_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(find_local_max_sptr self) -> float"""
        return _doa_swig.find_local_max_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(find_local_max_sptr self) -> float"""
        return _doa_swig.find_local_max_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(find_local_max_sptr self) -> float"""
        return _doa_swig.find_local_max_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(find_local_max_sptr self) -> float"""
        return _doa_swig.find_local_max_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(find_local_max_sptr self) -> float"""
        return _doa_swig.find_local_max_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(find_local_max_sptr self, int which) -> float
        pc_input_buffers_full(find_local_max_sptr self) -> pmt_vector_float
        """
        return _doa_swig.find_local_max_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(find_local_max_sptr self, int which) -> float
        pc_input_buffers_full_avg(find_local_max_sptr self) -> pmt_vector_float
        """
        return _doa_swig.find_local_max_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(find_local_max_sptr self, int which) -> float
        pc_input_buffers_full_var(find_local_max_sptr self) -> pmt_vector_float
        """
        return _doa_swig.find_local_max_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(find_local_max_sptr self, int which) -> float
        pc_output_buffers_full(find_local_max_sptr self) -> pmt_vector_float
        """
        return _doa_swig.find_local_max_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(find_local_max_sptr self, int which) -> float
        pc_output_buffers_full_avg(find_local_max_sptr self) -> pmt_vector_float
        """
        return _doa_swig.find_local_max_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(find_local_max_sptr self, int which) -> float
        pc_output_buffers_full_var(find_local_max_sptr self) -> pmt_vector_float
        """
        return _doa_swig.find_local_max_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(find_local_max_sptr self) -> float"""
        return _doa_swig.find_local_max_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(find_local_max_sptr self) -> float"""
        return _doa_swig.find_local_max_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(find_local_max_sptr self) -> float"""
        return _doa_swig.find_local_max_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(find_local_max_sptr self) -> float"""
        return _doa_swig.find_local_max_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(find_local_max_sptr self) -> float"""
        return _doa_swig.find_local_max_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(find_local_max_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.find_local_max_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(find_local_max_sptr self)"""
        return _doa_swig.find_local_max_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(find_local_max_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.find_local_max_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(find_local_max_sptr self) -> int"""
        return _doa_swig.find_local_max_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(find_local_max_sptr self) -> int"""
        return _doa_swig.find_local_max_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(find_local_max_sptr self, int priority) -> int"""
        return _doa_swig.find_local_max_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(find_local_max_sptr self) -> std::string"""
        return _doa_swig.find_local_max_sptr_name(self)


    def symbol_name(self):
        """symbol_name(find_local_max_sptr self) -> std::string"""
        return _doa_swig.find_local_max_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(find_local_max_sptr self) -> io_signature_sptr"""
        return _doa_swig.find_local_max_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(find_local_max_sptr self) -> io_signature_sptr"""
        return _doa_swig.find_local_max_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(find_local_max_sptr self) -> long"""
        return _doa_swig.find_local_max_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(find_local_max_sptr self) -> basic_block_sptr"""
        return _doa_swig.find_local_max_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(find_local_max_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.find_local_max_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(find_local_max_sptr self) -> std::string"""
        return _doa_swig.find_local_max_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(find_local_max_sptr self, std::string name)"""
        return _doa_swig.find_local_max_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(find_local_max_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _doa_swig.find_local_max_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(find_local_max_sptr self) -> swig_int_ptr"""
        return _doa_swig.find_local_max_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(find_local_max_sptr self) -> swig_int_ptr"""
        return _doa_swig.find_local_max_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(find_local_max_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _doa_swig.find_local_max_sptr_message_subscribers(self, which_port)

find_local_max_sptr_swigregister = _doa_swig.find_local_max_sptr_swigregister
find_local_max_sptr_swigregister(find_local_max_sptr)


find_local_max_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
find_local_max = find_local_max.make;

class calibrate_lin_array(object):
    """Proxy of C++ gr::doa::calibrate_lin_array class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(norm_spacing, num_ant_ele, pilot_angle):
        """make(float norm_spacing, int num_ant_ele, float pilot_angle) -> calibrate_lin_array_sptr"""
        return _doa_swig.calibrate_lin_array_make(norm_spacing, num_ant_ele, pilot_angle)

    make = staticmethod(make)
    __swig_destroy__ = _doa_swig.delete_calibrate_lin_array
    __del__ = lambda self: None
calibrate_lin_array_swigregister = _doa_swig.calibrate_lin_array_swigregister
calibrate_lin_array_swigregister(calibrate_lin_array)

def calibrate_lin_array_make(norm_spacing, num_ant_ele, pilot_angle):
    """calibrate_lin_array_make(float norm_spacing, int num_ant_ele, float pilot_angle) -> calibrate_lin_array_sptr"""
    return _doa_swig.calibrate_lin_array_make(norm_spacing, num_ant_ele, pilot_angle)

class calibrate_lin_array_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::doa::calibrate_lin_array)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::doa::calibrate_lin_array)> self) -> calibrate_lin_array_sptr
        __init__(boost::shared_ptr<(gr::doa::calibrate_lin_array)> self, calibrate_lin_array p) -> calibrate_lin_array_sptr
        """
        this = _doa_swig.new_calibrate_lin_array_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(calibrate_lin_array_sptr self) -> calibrate_lin_array"""
        return _doa_swig.calibrate_lin_array_sptr___deref__(self)

    __swig_destroy__ = _doa_swig.delete_calibrate_lin_array_sptr
    __del__ = lambda self: None

    def make(self, norm_spacing, num_ant_ele, pilot_angle):
        """make(calibrate_lin_array_sptr self, float norm_spacing, int num_ant_ele, float pilot_angle) -> calibrate_lin_array_sptr"""
        return _doa_swig.calibrate_lin_array_sptr_make(self, norm_spacing, num_ant_ele, pilot_angle)


    def history(self):
        """history(calibrate_lin_array_sptr self) -> unsigned int"""
        return _doa_swig.calibrate_lin_array_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(calibrate_lin_array_sptr self, int which, int delay)
        declare_sample_delay(calibrate_lin_array_sptr self, unsigned int delay)
        """
        return _doa_swig.calibrate_lin_array_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(calibrate_lin_array_sptr self, int which) -> unsigned int"""
        return _doa_swig.calibrate_lin_array_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(calibrate_lin_array_sptr self) -> int"""
        return _doa_swig.calibrate_lin_array_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(calibrate_lin_array_sptr self) -> double"""
        return _doa_swig.calibrate_lin_array_sptr_relative_rate(self)


    def start(self):
        """start(calibrate_lin_array_sptr self) -> bool"""
        return _doa_swig.calibrate_lin_array_sptr_start(self)


    def stop(self):
        """stop(calibrate_lin_array_sptr self) -> bool"""
        return _doa_swig.calibrate_lin_array_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(calibrate_lin_array_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.calibrate_lin_array_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(calibrate_lin_array_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.calibrate_lin_array_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(calibrate_lin_array_sptr self) -> int"""
        return _doa_swig.calibrate_lin_array_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(calibrate_lin_array_sptr self, int m)"""
        return _doa_swig.calibrate_lin_array_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(calibrate_lin_array_sptr self)"""
        return _doa_swig.calibrate_lin_array_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(calibrate_lin_array_sptr self) -> bool"""
        return _doa_swig.calibrate_lin_array_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(calibrate_lin_array_sptr self, int m)"""
        return _doa_swig.calibrate_lin_array_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(calibrate_lin_array_sptr self) -> int"""
        return _doa_swig.calibrate_lin_array_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(calibrate_lin_array_sptr self, int i) -> long"""
        return _doa_swig.calibrate_lin_array_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(calibrate_lin_array_sptr self, long max_output_buffer)
        set_max_output_buffer(calibrate_lin_array_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.calibrate_lin_array_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(calibrate_lin_array_sptr self, int i) -> long"""
        return _doa_swig.calibrate_lin_array_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(calibrate_lin_array_sptr self, long min_output_buffer)
        set_min_output_buffer(calibrate_lin_array_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.calibrate_lin_array_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(calibrate_lin_array_sptr self) -> float"""
        return _doa_swig.calibrate_lin_array_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(calibrate_lin_array_sptr self) -> float"""
        return _doa_swig.calibrate_lin_array_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(calibrate_lin_array_sptr self) -> float"""
        return _doa_swig.calibrate_lin_array_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(calibrate_lin_array_sptr self) -> float"""
        return _doa_swig.calibrate_lin_array_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(calibrate_lin_array_sptr self) -> float"""
        return _doa_swig.calibrate_lin_array_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(calibrate_lin_array_sptr self) -> float"""
        return _doa_swig.calibrate_lin_array_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(calibrate_lin_array_sptr self, int which) -> float
        pc_input_buffers_full(calibrate_lin_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.calibrate_lin_array_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(calibrate_lin_array_sptr self, int which) -> float
        pc_input_buffers_full_avg(calibrate_lin_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.calibrate_lin_array_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(calibrate_lin_array_sptr self, int which) -> float
        pc_input_buffers_full_var(calibrate_lin_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.calibrate_lin_array_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(calibrate_lin_array_sptr self, int which) -> float
        pc_output_buffers_full(calibrate_lin_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.calibrate_lin_array_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(calibrate_lin_array_sptr self, int which) -> float
        pc_output_buffers_full_avg(calibrate_lin_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.calibrate_lin_array_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(calibrate_lin_array_sptr self, int which) -> float
        pc_output_buffers_full_var(calibrate_lin_array_sptr self) -> pmt_vector_float
        """
        return _doa_swig.calibrate_lin_array_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(calibrate_lin_array_sptr self) -> float"""
        return _doa_swig.calibrate_lin_array_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(calibrate_lin_array_sptr self) -> float"""
        return _doa_swig.calibrate_lin_array_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(calibrate_lin_array_sptr self) -> float"""
        return _doa_swig.calibrate_lin_array_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(calibrate_lin_array_sptr self) -> float"""
        return _doa_swig.calibrate_lin_array_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(calibrate_lin_array_sptr self) -> float"""
        return _doa_swig.calibrate_lin_array_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(calibrate_lin_array_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.calibrate_lin_array_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(calibrate_lin_array_sptr self)"""
        return _doa_swig.calibrate_lin_array_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(calibrate_lin_array_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.calibrate_lin_array_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(calibrate_lin_array_sptr self) -> int"""
        return _doa_swig.calibrate_lin_array_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(calibrate_lin_array_sptr self) -> int"""
        return _doa_swig.calibrate_lin_array_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(calibrate_lin_array_sptr self, int priority) -> int"""
        return _doa_swig.calibrate_lin_array_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(calibrate_lin_array_sptr self) -> std::string"""
        return _doa_swig.calibrate_lin_array_sptr_name(self)


    def symbol_name(self):
        """symbol_name(calibrate_lin_array_sptr self) -> std::string"""
        return _doa_swig.calibrate_lin_array_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(calibrate_lin_array_sptr self) -> io_signature_sptr"""
        return _doa_swig.calibrate_lin_array_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(calibrate_lin_array_sptr self) -> io_signature_sptr"""
        return _doa_swig.calibrate_lin_array_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(calibrate_lin_array_sptr self) -> long"""
        return _doa_swig.calibrate_lin_array_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(calibrate_lin_array_sptr self) -> basic_block_sptr"""
        return _doa_swig.calibrate_lin_array_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(calibrate_lin_array_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.calibrate_lin_array_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(calibrate_lin_array_sptr self) -> std::string"""
        return _doa_swig.calibrate_lin_array_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(calibrate_lin_array_sptr self, std::string name)"""
        return _doa_swig.calibrate_lin_array_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(calibrate_lin_array_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _doa_swig.calibrate_lin_array_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(calibrate_lin_array_sptr self) -> swig_int_ptr"""
        return _doa_swig.calibrate_lin_array_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(calibrate_lin_array_sptr self) -> swig_int_ptr"""
        return _doa_swig.calibrate_lin_array_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(calibrate_lin_array_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _doa_swig.calibrate_lin_array_sptr_message_subscribers(self, which_port)

calibrate_lin_array_sptr_swigregister = _doa_swig.calibrate_lin_array_sptr_swigregister
calibrate_lin_array_sptr_swigregister(calibrate_lin_array_sptr)


calibrate_lin_array_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
calibrate_lin_array = calibrate_lin_array.make;



