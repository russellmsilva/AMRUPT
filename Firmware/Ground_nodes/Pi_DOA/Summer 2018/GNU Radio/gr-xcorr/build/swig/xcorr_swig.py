# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_xcorr_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_xcorr_swig')
    _xcorr_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_xcorr_swig', [dirname(__file__)])
        except ImportError:
            import _xcorr_swig
            return _xcorr_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_xcorr_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _xcorr_swig = swig_import_helper()
    del swig_import_helper
else:
    import _xcorr_swig
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _xcorr_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _xcorr_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _xcorr_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _xcorr_swig.high_res_timer_epoch()
class capon_ccf(object):
    """Proxy of C++ gr::xcorr::capon_ccf class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vector_size):
        """make(int vector_size) -> capon_ccf_sptr"""
        return _xcorr_swig.capon_ccf_make(vector_size)

    make = staticmethod(make)
    __swig_destroy__ = _xcorr_swig.delete_capon_ccf
    __del__ = lambda self: None
capon_ccf_swigregister = _xcorr_swig.capon_ccf_swigregister
capon_ccf_swigregister(capon_ccf)

def capon_ccf_make(vector_size):
    """capon_ccf_make(int vector_size) -> capon_ccf_sptr"""
    return _xcorr_swig.capon_ccf_make(vector_size)

class capon_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::capon_ccf)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::capon_ccf)> self) -> capon_ccf_sptr
        __init__(boost::shared_ptr<(gr::xcorr::capon_ccf)> self, capon_ccf p) -> capon_ccf_sptr
        """
        this = _xcorr_swig.new_capon_ccf_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(capon_ccf_sptr self) -> capon_ccf"""
        return _xcorr_swig.capon_ccf_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_capon_ccf_sptr
    __del__ = lambda self: None

    def make(self, vector_size):
        """make(capon_ccf_sptr self, int vector_size) -> capon_ccf_sptr"""
        return _xcorr_swig.capon_ccf_sptr_make(self, vector_size)


    def history(self):
        """history(capon_ccf_sptr self) -> unsigned int"""
        return _xcorr_swig.capon_ccf_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(capon_ccf_sptr self, int which, int delay)
        declare_sample_delay(capon_ccf_sptr self, unsigned int delay)
        """
        return _xcorr_swig.capon_ccf_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(capon_ccf_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.capon_ccf_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(capon_ccf_sptr self) -> int"""
        return _xcorr_swig.capon_ccf_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(capon_ccf_sptr self) -> double"""
        return _xcorr_swig.capon_ccf_sptr_relative_rate(self)


    def start(self):
        """start(capon_ccf_sptr self) -> bool"""
        return _xcorr_swig.capon_ccf_sptr_start(self)


    def stop(self):
        """stop(capon_ccf_sptr self) -> bool"""
        return _xcorr_swig.capon_ccf_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(capon_ccf_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.capon_ccf_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(capon_ccf_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.capon_ccf_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(capon_ccf_sptr self) -> int"""
        return _xcorr_swig.capon_ccf_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(capon_ccf_sptr self, int m)"""
        return _xcorr_swig.capon_ccf_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(capon_ccf_sptr self)"""
        return _xcorr_swig.capon_ccf_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(capon_ccf_sptr self) -> bool"""
        return _xcorr_swig.capon_ccf_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(capon_ccf_sptr self, int m)"""
        return _xcorr_swig.capon_ccf_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(capon_ccf_sptr self) -> int"""
        return _xcorr_swig.capon_ccf_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(capon_ccf_sptr self, int i) -> long"""
        return _xcorr_swig.capon_ccf_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(capon_ccf_sptr self, long max_output_buffer)
        set_max_output_buffer(capon_ccf_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.capon_ccf_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(capon_ccf_sptr self, int i) -> long"""
        return _xcorr_swig.capon_ccf_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(capon_ccf_sptr self, long min_output_buffer)
        set_min_output_buffer(capon_ccf_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.capon_ccf_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(capon_ccf_sptr self) -> float"""
        return _xcorr_swig.capon_ccf_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(capon_ccf_sptr self) -> float"""
        return _xcorr_swig.capon_ccf_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(capon_ccf_sptr self) -> float"""
        return _xcorr_swig.capon_ccf_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(capon_ccf_sptr self) -> float"""
        return _xcorr_swig.capon_ccf_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(capon_ccf_sptr self) -> float"""
        return _xcorr_swig.capon_ccf_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(capon_ccf_sptr self) -> float"""
        return _xcorr_swig.capon_ccf_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(capon_ccf_sptr self, int which) -> float
        pc_input_buffers_full(capon_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.capon_ccf_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(capon_ccf_sptr self, int which) -> float
        pc_input_buffers_full_avg(capon_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.capon_ccf_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(capon_ccf_sptr self, int which) -> float
        pc_input_buffers_full_var(capon_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.capon_ccf_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(capon_ccf_sptr self, int which) -> float
        pc_output_buffers_full(capon_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.capon_ccf_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(capon_ccf_sptr self, int which) -> float
        pc_output_buffers_full_avg(capon_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.capon_ccf_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(capon_ccf_sptr self, int which) -> float
        pc_output_buffers_full_var(capon_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.capon_ccf_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(capon_ccf_sptr self) -> float"""
        return _xcorr_swig.capon_ccf_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(capon_ccf_sptr self) -> float"""
        return _xcorr_swig.capon_ccf_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(capon_ccf_sptr self) -> float"""
        return _xcorr_swig.capon_ccf_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(capon_ccf_sptr self) -> float"""
        return _xcorr_swig.capon_ccf_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(capon_ccf_sptr self) -> float"""
        return _xcorr_swig.capon_ccf_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(capon_ccf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.capon_ccf_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(capon_ccf_sptr self)"""
        return _xcorr_swig.capon_ccf_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(capon_ccf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.capon_ccf_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(capon_ccf_sptr self) -> int"""
        return _xcorr_swig.capon_ccf_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(capon_ccf_sptr self) -> int"""
        return _xcorr_swig.capon_ccf_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(capon_ccf_sptr self, int priority) -> int"""
        return _xcorr_swig.capon_ccf_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(capon_ccf_sptr self) -> std::string"""
        return _xcorr_swig.capon_ccf_sptr_name(self)


    def symbol_name(self):
        """symbol_name(capon_ccf_sptr self) -> std::string"""
        return _xcorr_swig.capon_ccf_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(capon_ccf_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.capon_ccf_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(capon_ccf_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.capon_ccf_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(capon_ccf_sptr self) -> long"""
        return _xcorr_swig.capon_ccf_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(capon_ccf_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.capon_ccf_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(capon_ccf_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.capon_ccf_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(capon_ccf_sptr self) -> std::string"""
        return _xcorr_swig.capon_ccf_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(capon_ccf_sptr self, std::string name)"""
        return _xcorr_swig.capon_ccf_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(capon_ccf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.capon_ccf_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(capon_ccf_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.capon_ccf_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(capon_ccf_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.capon_ccf_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(capon_ccf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.capon_ccf_sptr_message_subscribers(self, which_port)

capon_ccf_sptr_swigregister = _xcorr_swig.capon_ccf_sptr_swigregister
capon_ccf_sptr_swigregister(capon_ccf_sptr)


capon_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
capon_ccf = capon_ccf.make;

class unwrap_ff(object):
    """Proxy of C++ gr::xcorr::unwrap_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vector_size, min, max):
        """make(int vector_size, float min, float max) -> unwrap_ff_sptr"""
        return _xcorr_swig.unwrap_ff_make(vector_size, min, max)

    make = staticmethod(make)
    __swig_destroy__ = _xcorr_swig.delete_unwrap_ff
    __del__ = lambda self: None
unwrap_ff_swigregister = _xcorr_swig.unwrap_ff_swigregister
unwrap_ff_swigregister(unwrap_ff)

def unwrap_ff_make(vector_size, min, max):
    """unwrap_ff_make(int vector_size, float min, float max) -> unwrap_ff_sptr"""
    return _xcorr_swig.unwrap_ff_make(vector_size, min, max)

class unwrap_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::unwrap_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::unwrap_ff)> self) -> unwrap_ff_sptr
        __init__(boost::shared_ptr<(gr::xcorr::unwrap_ff)> self, unwrap_ff p) -> unwrap_ff_sptr
        """
        this = _xcorr_swig.new_unwrap_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(unwrap_ff_sptr self) -> unwrap_ff"""
        return _xcorr_swig.unwrap_ff_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_unwrap_ff_sptr
    __del__ = lambda self: None

    def make(self, vector_size, min, max):
        """make(unwrap_ff_sptr self, int vector_size, float min, float max) -> unwrap_ff_sptr"""
        return _xcorr_swig.unwrap_ff_sptr_make(self, vector_size, min, max)


    def history(self):
        """history(unwrap_ff_sptr self) -> unsigned int"""
        return _xcorr_swig.unwrap_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(unwrap_ff_sptr self, int which, int delay)
        declare_sample_delay(unwrap_ff_sptr self, unsigned int delay)
        """
        return _xcorr_swig.unwrap_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(unwrap_ff_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.unwrap_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(unwrap_ff_sptr self) -> int"""
        return _xcorr_swig.unwrap_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(unwrap_ff_sptr self) -> double"""
        return _xcorr_swig.unwrap_ff_sptr_relative_rate(self)


    def start(self):
        """start(unwrap_ff_sptr self) -> bool"""
        return _xcorr_swig.unwrap_ff_sptr_start(self)


    def stop(self):
        """stop(unwrap_ff_sptr self) -> bool"""
        return _xcorr_swig.unwrap_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(unwrap_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.unwrap_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(unwrap_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.unwrap_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(unwrap_ff_sptr self) -> int"""
        return _xcorr_swig.unwrap_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(unwrap_ff_sptr self, int m)"""
        return _xcorr_swig.unwrap_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(unwrap_ff_sptr self)"""
        return _xcorr_swig.unwrap_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(unwrap_ff_sptr self) -> bool"""
        return _xcorr_swig.unwrap_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(unwrap_ff_sptr self, int m)"""
        return _xcorr_swig.unwrap_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(unwrap_ff_sptr self) -> int"""
        return _xcorr_swig.unwrap_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(unwrap_ff_sptr self, int i) -> long"""
        return _xcorr_swig.unwrap_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(unwrap_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(unwrap_ff_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.unwrap_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(unwrap_ff_sptr self, int i) -> long"""
        return _xcorr_swig.unwrap_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(unwrap_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(unwrap_ff_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.unwrap_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(unwrap_ff_sptr self) -> float"""
        return _xcorr_swig.unwrap_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(unwrap_ff_sptr self) -> float"""
        return _xcorr_swig.unwrap_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(unwrap_ff_sptr self) -> float"""
        return _xcorr_swig.unwrap_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(unwrap_ff_sptr self) -> float"""
        return _xcorr_swig.unwrap_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(unwrap_ff_sptr self) -> float"""
        return _xcorr_swig.unwrap_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(unwrap_ff_sptr self) -> float"""
        return _xcorr_swig.unwrap_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(unwrap_ff_sptr self, int which) -> float
        pc_input_buffers_full(unwrap_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.unwrap_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(unwrap_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(unwrap_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.unwrap_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(unwrap_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(unwrap_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.unwrap_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(unwrap_ff_sptr self, int which) -> float
        pc_output_buffers_full(unwrap_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.unwrap_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(unwrap_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(unwrap_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.unwrap_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(unwrap_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(unwrap_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.unwrap_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(unwrap_ff_sptr self) -> float"""
        return _xcorr_swig.unwrap_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(unwrap_ff_sptr self) -> float"""
        return _xcorr_swig.unwrap_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(unwrap_ff_sptr self) -> float"""
        return _xcorr_swig.unwrap_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(unwrap_ff_sptr self) -> float"""
        return _xcorr_swig.unwrap_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(unwrap_ff_sptr self) -> float"""
        return _xcorr_swig.unwrap_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(unwrap_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.unwrap_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(unwrap_ff_sptr self)"""
        return _xcorr_swig.unwrap_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(unwrap_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.unwrap_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(unwrap_ff_sptr self) -> int"""
        return _xcorr_swig.unwrap_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(unwrap_ff_sptr self) -> int"""
        return _xcorr_swig.unwrap_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(unwrap_ff_sptr self, int priority) -> int"""
        return _xcorr_swig.unwrap_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(unwrap_ff_sptr self) -> std::string"""
        return _xcorr_swig.unwrap_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(unwrap_ff_sptr self) -> std::string"""
        return _xcorr_swig.unwrap_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(unwrap_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.unwrap_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(unwrap_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.unwrap_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(unwrap_ff_sptr self) -> long"""
        return _xcorr_swig.unwrap_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(unwrap_ff_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.unwrap_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(unwrap_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.unwrap_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(unwrap_ff_sptr self) -> std::string"""
        return _xcorr_swig.unwrap_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(unwrap_ff_sptr self, std::string name)"""
        return _xcorr_swig.unwrap_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(unwrap_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.unwrap_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(unwrap_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.unwrap_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(unwrap_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.unwrap_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(unwrap_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.unwrap_ff_sptr_message_subscribers(self, which_port)

unwrap_ff_sptr_swigregister = _xcorr_swig.unwrap_ff_sptr_swigregister
unwrap_ff_sptr_swigregister(unwrap_ff_sptr)


unwrap_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
unwrap_ff = unwrap_ff.make;

class linearslope_ff(object):
    """Proxy of C++ gr::xcorr::linearslope_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vector_size):
        """make(int vector_size) -> linearslope_ff_sptr"""
        return _xcorr_swig.linearslope_ff_make(vector_size)

    make = staticmethod(make)
    __swig_destroy__ = _xcorr_swig.delete_linearslope_ff
    __del__ = lambda self: None
linearslope_ff_swigregister = _xcorr_swig.linearslope_ff_swigregister
linearslope_ff_swigregister(linearslope_ff)

def linearslope_ff_make(vector_size):
    """linearslope_ff_make(int vector_size) -> linearslope_ff_sptr"""
    return _xcorr_swig.linearslope_ff_make(vector_size)

class linearslope_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::linearslope_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::linearslope_ff)> self) -> linearslope_ff_sptr
        __init__(boost::shared_ptr<(gr::xcorr::linearslope_ff)> self, linearslope_ff p) -> linearslope_ff_sptr
        """
        this = _xcorr_swig.new_linearslope_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(linearslope_ff_sptr self) -> linearslope_ff"""
        return _xcorr_swig.linearslope_ff_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_linearslope_ff_sptr
    __del__ = lambda self: None

    def make(self, vector_size):
        """make(linearslope_ff_sptr self, int vector_size) -> linearslope_ff_sptr"""
        return _xcorr_swig.linearslope_ff_sptr_make(self, vector_size)


    def history(self):
        """history(linearslope_ff_sptr self) -> unsigned int"""
        return _xcorr_swig.linearslope_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(linearslope_ff_sptr self, int which, int delay)
        declare_sample_delay(linearslope_ff_sptr self, unsigned int delay)
        """
        return _xcorr_swig.linearslope_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(linearslope_ff_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.linearslope_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(linearslope_ff_sptr self) -> int"""
        return _xcorr_swig.linearslope_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(linearslope_ff_sptr self) -> double"""
        return _xcorr_swig.linearslope_ff_sptr_relative_rate(self)


    def start(self):
        """start(linearslope_ff_sptr self) -> bool"""
        return _xcorr_swig.linearslope_ff_sptr_start(self)


    def stop(self):
        """stop(linearslope_ff_sptr self) -> bool"""
        return _xcorr_swig.linearslope_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(linearslope_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.linearslope_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(linearslope_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.linearslope_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(linearslope_ff_sptr self) -> int"""
        return _xcorr_swig.linearslope_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(linearslope_ff_sptr self, int m)"""
        return _xcorr_swig.linearslope_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(linearslope_ff_sptr self)"""
        return _xcorr_swig.linearslope_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(linearslope_ff_sptr self) -> bool"""
        return _xcorr_swig.linearslope_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(linearslope_ff_sptr self, int m)"""
        return _xcorr_swig.linearslope_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(linearslope_ff_sptr self) -> int"""
        return _xcorr_swig.linearslope_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(linearslope_ff_sptr self, int i) -> long"""
        return _xcorr_swig.linearslope_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(linearslope_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(linearslope_ff_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.linearslope_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(linearslope_ff_sptr self, int i) -> long"""
        return _xcorr_swig.linearslope_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(linearslope_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(linearslope_ff_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.linearslope_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(linearslope_ff_sptr self) -> float"""
        return _xcorr_swig.linearslope_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(linearslope_ff_sptr self) -> float"""
        return _xcorr_swig.linearslope_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(linearslope_ff_sptr self) -> float"""
        return _xcorr_swig.linearslope_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(linearslope_ff_sptr self) -> float"""
        return _xcorr_swig.linearslope_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(linearslope_ff_sptr self) -> float"""
        return _xcorr_swig.linearslope_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(linearslope_ff_sptr self) -> float"""
        return _xcorr_swig.linearslope_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(linearslope_ff_sptr self, int which) -> float
        pc_input_buffers_full(linearslope_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.linearslope_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(linearslope_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(linearslope_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.linearslope_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(linearslope_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(linearslope_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.linearslope_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(linearslope_ff_sptr self, int which) -> float
        pc_output_buffers_full(linearslope_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.linearslope_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(linearslope_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(linearslope_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.linearslope_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(linearslope_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(linearslope_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.linearslope_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(linearslope_ff_sptr self) -> float"""
        return _xcorr_swig.linearslope_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(linearslope_ff_sptr self) -> float"""
        return _xcorr_swig.linearslope_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(linearslope_ff_sptr self) -> float"""
        return _xcorr_swig.linearslope_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(linearslope_ff_sptr self) -> float"""
        return _xcorr_swig.linearslope_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(linearslope_ff_sptr self) -> float"""
        return _xcorr_swig.linearslope_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(linearslope_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.linearslope_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(linearslope_ff_sptr self)"""
        return _xcorr_swig.linearslope_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(linearslope_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.linearslope_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(linearslope_ff_sptr self) -> int"""
        return _xcorr_swig.linearslope_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(linearslope_ff_sptr self) -> int"""
        return _xcorr_swig.linearslope_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(linearslope_ff_sptr self, int priority) -> int"""
        return _xcorr_swig.linearslope_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(linearslope_ff_sptr self) -> std::string"""
        return _xcorr_swig.linearslope_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(linearslope_ff_sptr self) -> std::string"""
        return _xcorr_swig.linearslope_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(linearslope_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.linearslope_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(linearslope_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.linearslope_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(linearslope_ff_sptr self) -> long"""
        return _xcorr_swig.linearslope_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(linearslope_ff_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.linearslope_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(linearslope_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.linearslope_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(linearslope_ff_sptr self) -> std::string"""
        return _xcorr_swig.linearslope_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(linearslope_ff_sptr self, std::string name)"""
        return _xcorr_swig.linearslope_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(linearslope_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.linearslope_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(linearslope_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.linearslope_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(linearslope_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.linearslope_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(linearslope_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.linearslope_ff_sptr_message_subscribers(self, which_port)

linearslope_ff_sptr_swigregister = _xcorr_swig.linearslope_ff_sptr_swigregister
linearslope_ff_sptr_swigregister(linearslope_ff_sptr)


linearslope_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
linearslope_ff = linearslope_ff.make;

class mode_ii(object):
    """Proxy of C++ gr::xcorr::mode_ii class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vector_size, max_value):
        """make(int vector_size, int max_value) -> mode_ii_sptr"""
        return _xcorr_swig.mode_ii_make(vector_size, max_value)

    make = staticmethod(make)
    __swig_destroy__ = _xcorr_swig.delete_mode_ii
    __del__ = lambda self: None
mode_ii_swigregister = _xcorr_swig.mode_ii_swigregister
mode_ii_swigregister(mode_ii)

def mode_ii_make(vector_size, max_value):
    """mode_ii_make(int vector_size, int max_value) -> mode_ii_sptr"""
    return _xcorr_swig.mode_ii_make(vector_size, max_value)

class mode_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::mode_ii)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::mode_ii)> self) -> mode_ii_sptr
        __init__(boost::shared_ptr<(gr::xcorr::mode_ii)> self, mode_ii p) -> mode_ii_sptr
        """
        this = _xcorr_swig.new_mode_ii_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(mode_ii_sptr self) -> mode_ii"""
        return _xcorr_swig.mode_ii_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_mode_ii_sptr
    __del__ = lambda self: None

    def make(self, vector_size, max_value):
        """make(mode_ii_sptr self, int vector_size, int max_value) -> mode_ii_sptr"""
        return _xcorr_swig.mode_ii_sptr_make(self, vector_size, max_value)


    def history(self):
        """history(mode_ii_sptr self) -> unsigned int"""
        return _xcorr_swig.mode_ii_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mode_ii_sptr self, int which, int delay)
        declare_sample_delay(mode_ii_sptr self, unsigned int delay)
        """
        return _xcorr_swig.mode_ii_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(mode_ii_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.mode_ii_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(mode_ii_sptr self) -> int"""
        return _xcorr_swig.mode_ii_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(mode_ii_sptr self) -> double"""
        return _xcorr_swig.mode_ii_sptr_relative_rate(self)


    def start(self):
        """start(mode_ii_sptr self) -> bool"""
        return _xcorr_swig.mode_ii_sptr_start(self)


    def stop(self):
        """stop(mode_ii_sptr self) -> bool"""
        return _xcorr_swig.mode_ii_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(mode_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.mode_ii_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(mode_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.mode_ii_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(mode_ii_sptr self) -> int"""
        return _xcorr_swig.mode_ii_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(mode_ii_sptr self, int m)"""
        return _xcorr_swig.mode_ii_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mode_ii_sptr self)"""
        return _xcorr_swig.mode_ii_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mode_ii_sptr self) -> bool"""
        return _xcorr_swig.mode_ii_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(mode_ii_sptr self, int m)"""
        return _xcorr_swig.mode_ii_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(mode_ii_sptr self) -> int"""
        return _xcorr_swig.mode_ii_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(mode_ii_sptr self, int i) -> long"""
        return _xcorr_swig.mode_ii_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mode_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(mode_ii_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.mode_ii_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(mode_ii_sptr self, int i) -> long"""
        return _xcorr_swig.mode_ii_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mode_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(mode_ii_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.mode_ii_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(mode_ii_sptr self) -> float"""
        return _xcorr_swig.mode_ii_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mode_ii_sptr self) -> float"""
        return _xcorr_swig.mode_ii_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mode_ii_sptr self) -> float"""
        return _xcorr_swig.mode_ii_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(mode_ii_sptr self) -> float"""
        return _xcorr_swig.mode_ii_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mode_ii_sptr self) -> float"""
        return _xcorr_swig.mode_ii_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(mode_ii_sptr self) -> float"""
        return _xcorr_swig.mode_ii_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mode_ii_sptr self, int which) -> float
        pc_input_buffers_full(mode_ii_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.mode_ii_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mode_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(mode_ii_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.mode_ii_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mode_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(mode_ii_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.mode_ii_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mode_ii_sptr self, int which) -> float
        pc_output_buffers_full(mode_ii_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.mode_ii_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mode_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(mode_ii_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.mode_ii_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mode_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(mode_ii_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.mode_ii_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(mode_ii_sptr self) -> float"""
        return _xcorr_swig.mode_ii_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(mode_ii_sptr self) -> float"""
        return _xcorr_swig.mode_ii_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(mode_ii_sptr self) -> float"""
        return _xcorr_swig.mode_ii_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(mode_ii_sptr self) -> float"""
        return _xcorr_swig.mode_ii_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(mode_ii_sptr self) -> float"""
        return _xcorr_swig.mode_ii_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(mode_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.mode_ii_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(mode_ii_sptr self)"""
        return _xcorr_swig.mode_ii_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(mode_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.mode_ii_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(mode_ii_sptr self) -> int"""
        return _xcorr_swig.mode_ii_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(mode_ii_sptr self) -> int"""
        return _xcorr_swig.mode_ii_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(mode_ii_sptr self, int priority) -> int"""
        return _xcorr_swig.mode_ii_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(mode_ii_sptr self) -> std::string"""
        return _xcorr_swig.mode_ii_sptr_name(self)


    def symbol_name(self):
        """symbol_name(mode_ii_sptr self) -> std::string"""
        return _xcorr_swig.mode_ii_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(mode_ii_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.mode_ii_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(mode_ii_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.mode_ii_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(mode_ii_sptr self) -> long"""
        return _xcorr_swig.mode_ii_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(mode_ii_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.mode_ii_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(mode_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.mode_ii_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(mode_ii_sptr self) -> std::string"""
        return _xcorr_swig.mode_ii_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(mode_ii_sptr self, std::string name)"""
        return _xcorr_swig.mode_ii_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(mode_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.mode_ii_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(mode_ii_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.mode_ii_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(mode_ii_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.mode_ii_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(mode_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.mode_ii_sptr_message_subscribers(self, which_port)

mode_ii_sptr_swigregister = _xcorr_swig.mode_ii_sptr_swigregister
mode_ii_sptr_swigregister(mode_ii_sptr)


mode_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mode_ii = mode_ii.make;

class lin_delay_cc(object):
    """Proxy of C++ gr::xcorr::lin_delay_cc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(samp_rate, delay):
        """make(int samp_rate, float delay) -> lin_delay_cc_sptr"""
        return _xcorr_swig.lin_delay_cc_make(samp_rate, delay)

    make = staticmethod(make)

    def dly(self):
        """dly(lin_delay_cc self) -> float"""
        return _xcorr_swig.lin_delay_cc_dly(self)


    def set_dly(self, new_delay):
        """set_dly(lin_delay_cc self, float new_delay)"""
        return _xcorr_swig.lin_delay_cc_set_dly(self, new_delay)

    __swig_destroy__ = _xcorr_swig.delete_lin_delay_cc
    __del__ = lambda self: None
lin_delay_cc_swigregister = _xcorr_swig.lin_delay_cc_swigregister
lin_delay_cc_swigregister(lin_delay_cc)

def lin_delay_cc_make(samp_rate, delay):
    """lin_delay_cc_make(int samp_rate, float delay) -> lin_delay_cc_sptr"""
    return _xcorr_swig.lin_delay_cc_make(samp_rate, delay)

class lin_delay_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::lin_delay_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::lin_delay_cc)> self) -> lin_delay_cc_sptr
        __init__(boost::shared_ptr<(gr::xcorr::lin_delay_cc)> self, lin_delay_cc p) -> lin_delay_cc_sptr
        """
        this = _xcorr_swig.new_lin_delay_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(lin_delay_cc_sptr self) -> lin_delay_cc"""
        return _xcorr_swig.lin_delay_cc_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_lin_delay_cc_sptr
    __del__ = lambda self: None

    def make(self, samp_rate, delay):
        """make(lin_delay_cc_sptr self, int samp_rate, float delay) -> lin_delay_cc_sptr"""
        return _xcorr_swig.lin_delay_cc_sptr_make(self, samp_rate, delay)


    def dly(self):
        """dly(lin_delay_cc_sptr self) -> float"""
        return _xcorr_swig.lin_delay_cc_sptr_dly(self)


    def set_dly(self, new_delay):
        """set_dly(lin_delay_cc_sptr self, float new_delay)"""
        return _xcorr_swig.lin_delay_cc_sptr_set_dly(self, new_delay)


    def history(self):
        """history(lin_delay_cc_sptr self) -> unsigned int"""
        return _xcorr_swig.lin_delay_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(lin_delay_cc_sptr self, int which, int delay)
        declare_sample_delay(lin_delay_cc_sptr self, unsigned int delay)
        """
        return _xcorr_swig.lin_delay_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(lin_delay_cc_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.lin_delay_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(lin_delay_cc_sptr self) -> int"""
        return _xcorr_swig.lin_delay_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(lin_delay_cc_sptr self) -> double"""
        return _xcorr_swig.lin_delay_cc_sptr_relative_rate(self)


    def start(self):
        """start(lin_delay_cc_sptr self) -> bool"""
        return _xcorr_swig.lin_delay_cc_sptr_start(self)


    def stop(self):
        """stop(lin_delay_cc_sptr self) -> bool"""
        return _xcorr_swig.lin_delay_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(lin_delay_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.lin_delay_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(lin_delay_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.lin_delay_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(lin_delay_cc_sptr self) -> int"""
        return _xcorr_swig.lin_delay_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(lin_delay_cc_sptr self, int m)"""
        return _xcorr_swig.lin_delay_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(lin_delay_cc_sptr self)"""
        return _xcorr_swig.lin_delay_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(lin_delay_cc_sptr self) -> bool"""
        return _xcorr_swig.lin_delay_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(lin_delay_cc_sptr self, int m)"""
        return _xcorr_swig.lin_delay_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(lin_delay_cc_sptr self) -> int"""
        return _xcorr_swig.lin_delay_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(lin_delay_cc_sptr self, int i) -> long"""
        return _xcorr_swig.lin_delay_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(lin_delay_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(lin_delay_cc_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.lin_delay_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(lin_delay_cc_sptr self, int i) -> long"""
        return _xcorr_swig.lin_delay_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(lin_delay_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(lin_delay_cc_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.lin_delay_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(lin_delay_cc_sptr self) -> float"""
        return _xcorr_swig.lin_delay_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(lin_delay_cc_sptr self) -> float"""
        return _xcorr_swig.lin_delay_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(lin_delay_cc_sptr self) -> float"""
        return _xcorr_swig.lin_delay_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(lin_delay_cc_sptr self) -> float"""
        return _xcorr_swig.lin_delay_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(lin_delay_cc_sptr self) -> float"""
        return _xcorr_swig.lin_delay_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(lin_delay_cc_sptr self) -> float"""
        return _xcorr_swig.lin_delay_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(lin_delay_cc_sptr self, int which) -> float
        pc_input_buffers_full(lin_delay_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.lin_delay_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(lin_delay_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(lin_delay_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.lin_delay_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(lin_delay_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(lin_delay_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.lin_delay_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(lin_delay_cc_sptr self, int which) -> float
        pc_output_buffers_full(lin_delay_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.lin_delay_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(lin_delay_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(lin_delay_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.lin_delay_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(lin_delay_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(lin_delay_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.lin_delay_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(lin_delay_cc_sptr self) -> float"""
        return _xcorr_swig.lin_delay_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(lin_delay_cc_sptr self) -> float"""
        return _xcorr_swig.lin_delay_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(lin_delay_cc_sptr self) -> float"""
        return _xcorr_swig.lin_delay_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(lin_delay_cc_sptr self) -> float"""
        return _xcorr_swig.lin_delay_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(lin_delay_cc_sptr self) -> float"""
        return _xcorr_swig.lin_delay_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(lin_delay_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.lin_delay_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(lin_delay_cc_sptr self)"""
        return _xcorr_swig.lin_delay_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(lin_delay_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.lin_delay_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(lin_delay_cc_sptr self) -> int"""
        return _xcorr_swig.lin_delay_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(lin_delay_cc_sptr self) -> int"""
        return _xcorr_swig.lin_delay_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(lin_delay_cc_sptr self, int priority) -> int"""
        return _xcorr_swig.lin_delay_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(lin_delay_cc_sptr self) -> std::string"""
        return _xcorr_swig.lin_delay_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(lin_delay_cc_sptr self) -> std::string"""
        return _xcorr_swig.lin_delay_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(lin_delay_cc_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.lin_delay_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(lin_delay_cc_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.lin_delay_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(lin_delay_cc_sptr self) -> long"""
        return _xcorr_swig.lin_delay_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(lin_delay_cc_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.lin_delay_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(lin_delay_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.lin_delay_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(lin_delay_cc_sptr self) -> std::string"""
        return _xcorr_swig.lin_delay_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(lin_delay_cc_sptr self, std::string name)"""
        return _xcorr_swig.lin_delay_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(lin_delay_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.lin_delay_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(lin_delay_cc_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.lin_delay_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(lin_delay_cc_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.lin_delay_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(lin_delay_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.lin_delay_cc_sptr_message_subscribers(self, which_port)

lin_delay_cc_sptr_swigregister = _xcorr_swig.lin_delay_cc_sptr_swigregister
lin_delay_cc_sptr_swigregister(lin_delay_cc_sptr)


lin_delay_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
lin_delay_cc = lin_delay_cc.make;

class peak_estimator_cif(object):
    """Proxy of C++ gr::xcorr::peak_estimator_cif class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vector_len):
        """make(int vector_len) -> peak_estimator_cif_sptr"""
        return _xcorr_swig.peak_estimator_cif_make(vector_len)

    make = staticmethod(make)
    __swig_destroy__ = _xcorr_swig.delete_peak_estimator_cif
    __del__ = lambda self: None
peak_estimator_cif_swigregister = _xcorr_swig.peak_estimator_cif_swigregister
peak_estimator_cif_swigregister(peak_estimator_cif)

def peak_estimator_cif_make(vector_len):
    """peak_estimator_cif_make(int vector_len) -> peak_estimator_cif_sptr"""
    return _xcorr_swig.peak_estimator_cif_make(vector_len)

class peak_estimator_cif_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::peak_estimator_cif)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::peak_estimator_cif)> self) -> peak_estimator_cif_sptr
        __init__(boost::shared_ptr<(gr::xcorr::peak_estimator_cif)> self, peak_estimator_cif p) -> peak_estimator_cif_sptr
        """
        this = _xcorr_swig.new_peak_estimator_cif_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(peak_estimator_cif_sptr self) -> peak_estimator_cif"""
        return _xcorr_swig.peak_estimator_cif_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_peak_estimator_cif_sptr
    __del__ = lambda self: None

    def make(self, vector_len):
        """make(peak_estimator_cif_sptr self, int vector_len) -> peak_estimator_cif_sptr"""
        return _xcorr_swig.peak_estimator_cif_sptr_make(self, vector_len)


    def history(self):
        """history(peak_estimator_cif_sptr self) -> unsigned int"""
        return _xcorr_swig.peak_estimator_cif_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(peak_estimator_cif_sptr self, int which, int delay)
        declare_sample_delay(peak_estimator_cif_sptr self, unsigned int delay)
        """
        return _xcorr_swig.peak_estimator_cif_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(peak_estimator_cif_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.peak_estimator_cif_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(peak_estimator_cif_sptr self) -> int"""
        return _xcorr_swig.peak_estimator_cif_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(peak_estimator_cif_sptr self) -> double"""
        return _xcorr_swig.peak_estimator_cif_sptr_relative_rate(self)


    def start(self):
        """start(peak_estimator_cif_sptr self) -> bool"""
        return _xcorr_swig.peak_estimator_cif_sptr_start(self)


    def stop(self):
        """stop(peak_estimator_cif_sptr self) -> bool"""
        return _xcorr_swig.peak_estimator_cif_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(peak_estimator_cif_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.peak_estimator_cif_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(peak_estimator_cif_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.peak_estimator_cif_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(peak_estimator_cif_sptr self) -> int"""
        return _xcorr_swig.peak_estimator_cif_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(peak_estimator_cif_sptr self, int m)"""
        return _xcorr_swig.peak_estimator_cif_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(peak_estimator_cif_sptr self)"""
        return _xcorr_swig.peak_estimator_cif_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(peak_estimator_cif_sptr self) -> bool"""
        return _xcorr_swig.peak_estimator_cif_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(peak_estimator_cif_sptr self, int m)"""
        return _xcorr_swig.peak_estimator_cif_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(peak_estimator_cif_sptr self) -> int"""
        return _xcorr_swig.peak_estimator_cif_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(peak_estimator_cif_sptr self, int i) -> long"""
        return _xcorr_swig.peak_estimator_cif_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(peak_estimator_cif_sptr self, long max_output_buffer)
        set_max_output_buffer(peak_estimator_cif_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.peak_estimator_cif_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(peak_estimator_cif_sptr self, int i) -> long"""
        return _xcorr_swig.peak_estimator_cif_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(peak_estimator_cif_sptr self, long min_output_buffer)
        set_min_output_buffer(peak_estimator_cif_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.peak_estimator_cif_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(peak_estimator_cif_sptr self) -> float"""
        return _xcorr_swig.peak_estimator_cif_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(peak_estimator_cif_sptr self) -> float"""
        return _xcorr_swig.peak_estimator_cif_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(peak_estimator_cif_sptr self) -> float"""
        return _xcorr_swig.peak_estimator_cif_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(peak_estimator_cif_sptr self) -> float"""
        return _xcorr_swig.peak_estimator_cif_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(peak_estimator_cif_sptr self) -> float"""
        return _xcorr_swig.peak_estimator_cif_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(peak_estimator_cif_sptr self) -> float"""
        return _xcorr_swig.peak_estimator_cif_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(peak_estimator_cif_sptr self, int which) -> float
        pc_input_buffers_full(peak_estimator_cif_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.peak_estimator_cif_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(peak_estimator_cif_sptr self, int which) -> float
        pc_input_buffers_full_avg(peak_estimator_cif_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.peak_estimator_cif_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(peak_estimator_cif_sptr self, int which) -> float
        pc_input_buffers_full_var(peak_estimator_cif_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.peak_estimator_cif_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(peak_estimator_cif_sptr self, int which) -> float
        pc_output_buffers_full(peak_estimator_cif_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.peak_estimator_cif_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(peak_estimator_cif_sptr self, int which) -> float
        pc_output_buffers_full_avg(peak_estimator_cif_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.peak_estimator_cif_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(peak_estimator_cif_sptr self, int which) -> float
        pc_output_buffers_full_var(peak_estimator_cif_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.peak_estimator_cif_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(peak_estimator_cif_sptr self) -> float"""
        return _xcorr_swig.peak_estimator_cif_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(peak_estimator_cif_sptr self) -> float"""
        return _xcorr_swig.peak_estimator_cif_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(peak_estimator_cif_sptr self) -> float"""
        return _xcorr_swig.peak_estimator_cif_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(peak_estimator_cif_sptr self) -> float"""
        return _xcorr_swig.peak_estimator_cif_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(peak_estimator_cif_sptr self) -> float"""
        return _xcorr_swig.peak_estimator_cif_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(peak_estimator_cif_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.peak_estimator_cif_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(peak_estimator_cif_sptr self)"""
        return _xcorr_swig.peak_estimator_cif_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(peak_estimator_cif_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.peak_estimator_cif_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(peak_estimator_cif_sptr self) -> int"""
        return _xcorr_swig.peak_estimator_cif_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(peak_estimator_cif_sptr self) -> int"""
        return _xcorr_swig.peak_estimator_cif_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(peak_estimator_cif_sptr self, int priority) -> int"""
        return _xcorr_swig.peak_estimator_cif_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(peak_estimator_cif_sptr self) -> std::string"""
        return _xcorr_swig.peak_estimator_cif_sptr_name(self)


    def symbol_name(self):
        """symbol_name(peak_estimator_cif_sptr self) -> std::string"""
        return _xcorr_swig.peak_estimator_cif_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(peak_estimator_cif_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.peak_estimator_cif_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(peak_estimator_cif_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.peak_estimator_cif_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(peak_estimator_cif_sptr self) -> long"""
        return _xcorr_swig.peak_estimator_cif_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(peak_estimator_cif_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.peak_estimator_cif_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(peak_estimator_cif_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.peak_estimator_cif_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(peak_estimator_cif_sptr self) -> std::string"""
        return _xcorr_swig.peak_estimator_cif_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(peak_estimator_cif_sptr self, std::string name)"""
        return _xcorr_swig.peak_estimator_cif_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(peak_estimator_cif_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.peak_estimator_cif_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(peak_estimator_cif_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.peak_estimator_cif_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(peak_estimator_cif_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.peak_estimator_cif_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(peak_estimator_cif_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.peak_estimator_cif_sptr_message_subscribers(self, which_port)

peak_estimator_cif_sptr_swigregister = _xcorr_swig.peak_estimator_cif_sptr_swigregister
peak_estimator_cif_sptr_swigregister(peak_estimator_cif_sptr)


peak_estimator_cif_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
peak_estimator_cif = peak_estimator_cif.make;

class cub_delay_cc(object):
    """Proxy of C++ gr::xcorr::cub_delay_cc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(samp_rate, delay):
        """make(int samp_rate, float delay) -> cub_delay_cc_sptr"""
        return _xcorr_swig.cub_delay_cc_make(samp_rate, delay)

    make = staticmethod(make)

    def dly(self):
        """dly(cub_delay_cc self) -> float"""
        return _xcorr_swig.cub_delay_cc_dly(self)


    def set_dly(self, new_delay):
        """set_dly(cub_delay_cc self, float new_delay)"""
        return _xcorr_swig.cub_delay_cc_set_dly(self, new_delay)

    __swig_destroy__ = _xcorr_swig.delete_cub_delay_cc
    __del__ = lambda self: None
cub_delay_cc_swigregister = _xcorr_swig.cub_delay_cc_swigregister
cub_delay_cc_swigregister(cub_delay_cc)

def cub_delay_cc_make(samp_rate, delay):
    """cub_delay_cc_make(int samp_rate, float delay) -> cub_delay_cc_sptr"""
    return _xcorr_swig.cub_delay_cc_make(samp_rate, delay)

class cub_delay_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::cub_delay_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::cub_delay_cc)> self) -> cub_delay_cc_sptr
        __init__(boost::shared_ptr<(gr::xcorr::cub_delay_cc)> self, cub_delay_cc p) -> cub_delay_cc_sptr
        """
        this = _xcorr_swig.new_cub_delay_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(cub_delay_cc_sptr self) -> cub_delay_cc"""
        return _xcorr_swig.cub_delay_cc_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_cub_delay_cc_sptr
    __del__ = lambda self: None

    def make(self, samp_rate, delay):
        """make(cub_delay_cc_sptr self, int samp_rate, float delay) -> cub_delay_cc_sptr"""
        return _xcorr_swig.cub_delay_cc_sptr_make(self, samp_rate, delay)


    def dly(self):
        """dly(cub_delay_cc_sptr self) -> float"""
        return _xcorr_swig.cub_delay_cc_sptr_dly(self)


    def set_dly(self, new_delay):
        """set_dly(cub_delay_cc_sptr self, float new_delay)"""
        return _xcorr_swig.cub_delay_cc_sptr_set_dly(self, new_delay)


    def history(self):
        """history(cub_delay_cc_sptr self) -> unsigned int"""
        return _xcorr_swig.cub_delay_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(cub_delay_cc_sptr self, int which, int delay)
        declare_sample_delay(cub_delay_cc_sptr self, unsigned int delay)
        """
        return _xcorr_swig.cub_delay_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(cub_delay_cc_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.cub_delay_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(cub_delay_cc_sptr self) -> int"""
        return _xcorr_swig.cub_delay_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(cub_delay_cc_sptr self) -> double"""
        return _xcorr_swig.cub_delay_cc_sptr_relative_rate(self)


    def start(self):
        """start(cub_delay_cc_sptr self) -> bool"""
        return _xcorr_swig.cub_delay_cc_sptr_start(self)


    def stop(self):
        """stop(cub_delay_cc_sptr self) -> bool"""
        return _xcorr_swig.cub_delay_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(cub_delay_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.cub_delay_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(cub_delay_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.cub_delay_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(cub_delay_cc_sptr self) -> int"""
        return _xcorr_swig.cub_delay_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(cub_delay_cc_sptr self, int m)"""
        return _xcorr_swig.cub_delay_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(cub_delay_cc_sptr self)"""
        return _xcorr_swig.cub_delay_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(cub_delay_cc_sptr self) -> bool"""
        return _xcorr_swig.cub_delay_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(cub_delay_cc_sptr self, int m)"""
        return _xcorr_swig.cub_delay_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(cub_delay_cc_sptr self) -> int"""
        return _xcorr_swig.cub_delay_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(cub_delay_cc_sptr self, int i) -> long"""
        return _xcorr_swig.cub_delay_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(cub_delay_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(cub_delay_cc_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.cub_delay_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(cub_delay_cc_sptr self, int i) -> long"""
        return _xcorr_swig.cub_delay_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(cub_delay_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(cub_delay_cc_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.cub_delay_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(cub_delay_cc_sptr self) -> float"""
        return _xcorr_swig.cub_delay_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(cub_delay_cc_sptr self) -> float"""
        return _xcorr_swig.cub_delay_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(cub_delay_cc_sptr self) -> float"""
        return _xcorr_swig.cub_delay_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(cub_delay_cc_sptr self) -> float"""
        return _xcorr_swig.cub_delay_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(cub_delay_cc_sptr self) -> float"""
        return _xcorr_swig.cub_delay_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(cub_delay_cc_sptr self) -> float"""
        return _xcorr_swig.cub_delay_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(cub_delay_cc_sptr self, int which) -> float
        pc_input_buffers_full(cub_delay_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.cub_delay_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(cub_delay_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(cub_delay_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.cub_delay_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(cub_delay_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(cub_delay_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.cub_delay_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(cub_delay_cc_sptr self, int which) -> float
        pc_output_buffers_full(cub_delay_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.cub_delay_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(cub_delay_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(cub_delay_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.cub_delay_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(cub_delay_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(cub_delay_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.cub_delay_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(cub_delay_cc_sptr self) -> float"""
        return _xcorr_swig.cub_delay_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(cub_delay_cc_sptr self) -> float"""
        return _xcorr_swig.cub_delay_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(cub_delay_cc_sptr self) -> float"""
        return _xcorr_swig.cub_delay_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(cub_delay_cc_sptr self) -> float"""
        return _xcorr_swig.cub_delay_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(cub_delay_cc_sptr self) -> float"""
        return _xcorr_swig.cub_delay_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(cub_delay_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.cub_delay_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(cub_delay_cc_sptr self)"""
        return _xcorr_swig.cub_delay_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(cub_delay_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.cub_delay_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(cub_delay_cc_sptr self) -> int"""
        return _xcorr_swig.cub_delay_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(cub_delay_cc_sptr self) -> int"""
        return _xcorr_swig.cub_delay_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(cub_delay_cc_sptr self, int priority) -> int"""
        return _xcorr_swig.cub_delay_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(cub_delay_cc_sptr self) -> std::string"""
        return _xcorr_swig.cub_delay_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(cub_delay_cc_sptr self) -> std::string"""
        return _xcorr_swig.cub_delay_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(cub_delay_cc_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.cub_delay_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(cub_delay_cc_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.cub_delay_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(cub_delay_cc_sptr self) -> long"""
        return _xcorr_swig.cub_delay_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(cub_delay_cc_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.cub_delay_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(cub_delay_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.cub_delay_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(cub_delay_cc_sptr self) -> std::string"""
        return _xcorr_swig.cub_delay_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(cub_delay_cc_sptr self, std::string name)"""
        return _xcorr_swig.cub_delay_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(cub_delay_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.cub_delay_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(cub_delay_cc_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.cub_delay_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(cub_delay_cc_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.cub_delay_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(cub_delay_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.cub_delay_cc_sptr_message_subscribers(self, which_port)

cub_delay_cc_sptr_swigregister = _xcorr_swig.cub_delay_cc_sptr_swigregister
cub_delay_cc_sptr_swigregister(cub_delay_cc_sptr)


cub_delay_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cub_delay_cc = cub_delay_cc.make;

class cumulative_ff(object):
    """Proxy of C++ gr::xcorr::cumulative_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(start):
        """make(float start) -> cumulative_ff_sptr"""
        return _xcorr_swig.cumulative_ff_make(start)

    make = staticmethod(make)
    __swig_destroy__ = _xcorr_swig.delete_cumulative_ff
    __del__ = lambda self: None
cumulative_ff_swigregister = _xcorr_swig.cumulative_ff_swigregister
cumulative_ff_swigregister(cumulative_ff)

def cumulative_ff_make(start):
    """cumulative_ff_make(float start) -> cumulative_ff_sptr"""
    return _xcorr_swig.cumulative_ff_make(start)

class cumulative_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::cumulative_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::cumulative_ff)> self) -> cumulative_ff_sptr
        __init__(boost::shared_ptr<(gr::xcorr::cumulative_ff)> self, cumulative_ff p) -> cumulative_ff_sptr
        """
        this = _xcorr_swig.new_cumulative_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(cumulative_ff_sptr self) -> cumulative_ff"""
        return _xcorr_swig.cumulative_ff_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_cumulative_ff_sptr
    __del__ = lambda self: None

    def make(self, start):
        """make(cumulative_ff_sptr self, float start) -> cumulative_ff_sptr"""
        return _xcorr_swig.cumulative_ff_sptr_make(self, start)


    def history(self):
        """history(cumulative_ff_sptr self) -> unsigned int"""
        return _xcorr_swig.cumulative_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(cumulative_ff_sptr self, int which, int delay)
        declare_sample_delay(cumulative_ff_sptr self, unsigned int delay)
        """
        return _xcorr_swig.cumulative_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(cumulative_ff_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.cumulative_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(cumulative_ff_sptr self) -> int"""
        return _xcorr_swig.cumulative_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(cumulative_ff_sptr self) -> double"""
        return _xcorr_swig.cumulative_ff_sptr_relative_rate(self)


    def start(self):
        """start(cumulative_ff_sptr self) -> bool"""
        return _xcorr_swig.cumulative_ff_sptr_start(self)


    def stop(self):
        """stop(cumulative_ff_sptr self) -> bool"""
        return _xcorr_swig.cumulative_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(cumulative_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.cumulative_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(cumulative_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.cumulative_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(cumulative_ff_sptr self) -> int"""
        return _xcorr_swig.cumulative_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(cumulative_ff_sptr self, int m)"""
        return _xcorr_swig.cumulative_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(cumulative_ff_sptr self)"""
        return _xcorr_swig.cumulative_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(cumulative_ff_sptr self) -> bool"""
        return _xcorr_swig.cumulative_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(cumulative_ff_sptr self, int m)"""
        return _xcorr_swig.cumulative_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(cumulative_ff_sptr self) -> int"""
        return _xcorr_swig.cumulative_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(cumulative_ff_sptr self, int i) -> long"""
        return _xcorr_swig.cumulative_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(cumulative_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(cumulative_ff_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.cumulative_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(cumulative_ff_sptr self, int i) -> long"""
        return _xcorr_swig.cumulative_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(cumulative_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(cumulative_ff_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.cumulative_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(cumulative_ff_sptr self) -> float"""
        return _xcorr_swig.cumulative_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(cumulative_ff_sptr self) -> float"""
        return _xcorr_swig.cumulative_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(cumulative_ff_sptr self) -> float"""
        return _xcorr_swig.cumulative_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(cumulative_ff_sptr self) -> float"""
        return _xcorr_swig.cumulative_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(cumulative_ff_sptr self) -> float"""
        return _xcorr_swig.cumulative_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(cumulative_ff_sptr self) -> float"""
        return _xcorr_swig.cumulative_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(cumulative_ff_sptr self, int which) -> float
        pc_input_buffers_full(cumulative_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.cumulative_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(cumulative_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(cumulative_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.cumulative_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(cumulative_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(cumulative_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.cumulative_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(cumulative_ff_sptr self, int which) -> float
        pc_output_buffers_full(cumulative_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.cumulative_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(cumulative_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(cumulative_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.cumulative_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(cumulative_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(cumulative_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.cumulative_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(cumulative_ff_sptr self) -> float"""
        return _xcorr_swig.cumulative_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(cumulative_ff_sptr self) -> float"""
        return _xcorr_swig.cumulative_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(cumulative_ff_sptr self) -> float"""
        return _xcorr_swig.cumulative_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(cumulative_ff_sptr self) -> float"""
        return _xcorr_swig.cumulative_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(cumulative_ff_sptr self) -> float"""
        return _xcorr_swig.cumulative_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(cumulative_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.cumulative_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(cumulative_ff_sptr self)"""
        return _xcorr_swig.cumulative_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(cumulative_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.cumulative_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(cumulative_ff_sptr self) -> int"""
        return _xcorr_swig.cumulative_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(cumulative_ff_sptr self) -> int"""
        return _xcorr_swig.cumulative_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(cumulative_ff_sptr self, int priority) -> int"""
        return _xcorr_swig.cumulative_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(cumulative_ff_sptr self) -> std::string"""
        return _xcorr_swig.cumulative_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(cumulative_ff_sptr self) -> std::string"""
        return _xcorr_swig.cumulative_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(cumulative_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.cumulative_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(cumulative_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.cumulative_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(cumulative_ff_sptr self) -> long"""
        return _xcorr_swig.cumulative_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(cumulative_ff_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.cumulative_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(cumulative_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.cumulative_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(cumulative_ff_sptr self) -> std::string"""
        return _xcorr_swig.cumulative_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(cumulative_ff_sptr self, std::string name)"""
        return _xcorr_swig.cumulative_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(cumulative_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.cumulative_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(cumulative_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.cumulative_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(cumulative_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.cumulative_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(cumulative_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.cumulative_ff_sptr_message_subscribers(self, which_port)

cumulative_ff_sptr_swigregister = _xcorr_swig.cumulative_ff_sptr_swigregister
cumulative_ff_sptr_swigregister(cumulative_ff_sptr)


cumulative_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cumulative_ff = cumulative_ff.make;

class variance_ff(object):
    """Proxy of C++ gr::xcorr::variance_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vec_len):
        """make(int vec_len) -> variance_ff_sptr"""
        return _xcorr_swig.variance_ff_make(vec_len)

    make = staticmethod(make)
    __swig_destroy__ = _xcorr_swig.delete_variance_ff
    __del__ = lambda self: None
variance_ff_swigregister = _xcorr_swig.variance_ff_swigregister
variance_ff_swigregister(variance_ff)

def variance_ff_make(vec_len):
    """variance_ff_make(int vec_len) -> variance_ff_sptr"""
    return _xcorr_swig.variance_ff_make(vec_len)

class variance_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::variance_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::variance_ff)> self) -> variance_ff_sptr
        __init__(boost::shared_ptr<(gr::xcorr::variance_ff)> self, variance_ff p) -> variance_ff_sptr
        """
        this = _xcorr_swig.new_variance_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(variance_ff_sptr self) -> variance_ff"""
        return _xcorr_swig.variance_ff_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_variance_ff_sptr
    __del__ = lambda self: None

    def make(self, vec_len):
        """make(variance_ff_sptr self, int vec_len) -> variance_ff_sptr"""
        return _xcorr_swig.variance_ff_sptr_make(self, vec_len)


    def history(self):
        """history(variance_ff_sptr self) -> unsigned int"""
        return _xcorr_swig.variance_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(variance_ff_sptr self, int which, int delay)
        declare_sample_delay(variance_ff_sptr self, unsigned int delay)
        """
        return _xcorr_swig.variance_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(variance_ff_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.variance_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(variance_ff_sptr self) -> int"""
        return _xcorr_swig.variance_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(variance_ff_sptr self) -> double"""
        return _xcorr_swig.variance_ff_sptr_relative_rate(self)


    def start(self):
        """start(variance_ff_sptr self) -> bool"""
        return _xcorr_swig.variance_ff_sptr_start(self)


    def stop(self):
        """stop(variance_ff_sptr self) -> bool"""
        return _xcorr_swig.variance_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(variance_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.variance_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(variance_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.variance_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(variance_ff_sptr self) -> int"""
        return _xcorr_swig.variance_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(variance_ff_sptr self, int m)"""
        return _xcorr_swig.variance_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(variance_ff_sptr self)"""
        return _xcorr_swig.variance_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(variance_ff_sptr self) -> bool"""
        return _xcorr_swig.variance_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(variance_ff_sptr self, int m)"""
        return _xcorr_swig.variance_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(variance_ff_sptr self) -> int"""
        return _xcorr_swig.variance_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(variance_ff_sptr self, int i) -> long"""
        return _xcorr_swig.variance_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(variance_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(variance_ff_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.variance_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(variance_ff_sptr self, int i) -> long"""
        return _xcorr_swig.variance_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(variance_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(variance_ff_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.variance_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(variance_ff_sptr self) -> float"""
        return _xcorr_swig.variance_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(variance_ff_sptr self) -> float"""
        return _xcorr_swig.variance_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(variance_ff_sptr self) -> float"""
        return _xcorr_swig.variance_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(variance_ff_sptr self) -> float"""
        return _xcorr_swig.variance_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(variance_ff_sptr self) -> float"""
        return _xcorr_swig.variance_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(variance_ff_sptr self) -> float"""
        return _xcorr_swig.variance_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(variance_ff_sptr self, int which) -> float
        pc_input_buffers_full(variance_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.variance_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(variance_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(variance_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.variance_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(variance_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(variance_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.variance_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(variance_ff_sptr self, int which) -> float
        pc_output_buffers_full(variance_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.variance_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(variance_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(variance_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.variance_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(variance_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(variance_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.variance_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(variance_ff_sptr self) -> float"""
        return _xcorr_swig.variance_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(variance_ff_sptr self) -> float"""
        return _xcorr_swig.variance_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(variance_ff_sptr self) -> float"""
        return _xcorr_swig.variance_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(variance_ff_sptr self) -> float"""
        return _xcorr_swig.variance_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(variance_ff_sptr self) -> float"""
        return _xcorr_swig.variance_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(variance_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.variance_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(variance_ff_sptr self)"""
        return _xcorr_swig.variance_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(variance_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.variance_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(variance_ff_sptr self) -> int"""
        return _xcorr_swig.variance_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(variance_ff_sptr self) -> int"""
        return _xcorr_swig.variance_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(variance_ff_sptr self, int priority) -> int"""
        return _xcorr_swig.variance_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(variance_ff_sptr self) -> std::string"""
        return _xcorr_swig.variance_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(variance_ff_sptr self) -> std::string"""
        return _xcorr_swig.variance_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(variance_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.variance_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(variance_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.variance_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(variance_ff_sptr self) -> long"""
        return _xcorr_swig.variance_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(variance_ff_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.variance_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(variance_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.variance_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(variance_ff_sptr self) -> std::string"""
        return _xcorr_swig.variance_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(variance_ff_sptr self, std::string name)"""
        return _xcorr_swig.variance_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(variance_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.variance_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(variance_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.variance_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(variance_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.variance_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(variance_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.variance_ff_sptr_message_subscribers(self, which_port)

variance_ff_sptr_swigregister = _xcorr_swig.variance_ff_sptr_swigregister
variance_ff_sptr_swigregister(variance_ff_sptr)


variance_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
variance_ff = variance_ff.make;

class zero_pad_cc(object):
    """Proxy of C++ gr::xcorr::zero_pad_cc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vec_len_in, vec_len_out):
        """make(int vec_len_in, int vec_len_out) -> zero_pad_cc_sptr"""
        return _xcorr_swig.zero_pad_cc_make(vec_len_in, vec_len_out)

    make = staticmethod(make)
    __swig_destroy__ = _xcorr_swig.delete_zero_pad_cc
    __del__ = lambda self: None
zero_pad_cc_swigregister = _xcorr_swig.zero_pad_cc_swigregister
zero_pad_cc_swigregister(zero_pad_cc)

def zero_pad_cc_make(vec_len_in, vec_len_out):
    """zero_pad_cc_make(int vec_len_in, int vec_len_out) -> zero_pad_cc_sptr"""
    return _xcorr_swig.zero_pad_cc_make(vec_len_in, vec_len_out)

class zero_pad_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::zero_pad_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::zero_pad_cc)> self) -> zero_pad_cc_sptr
        __init__(boost::shared_ptr<(gr::xcorr::zero_pad_cc)> self, zero_pad_cc p) -> zero_pad_cc_sptr
        """
        this = _xcorr_swig.new_zero_pad_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(zero_pad_cc_sptr self) -> zero_pad_cc"""
        return _xcorr_swig.zero_pad_cc_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_zero_pad_cc_sptr
    __del__ = lambda self: None

    def make(self, vec_len_in, vec_len_out):
        """make(zero_pad_cc_sptr self, int vec_len_in, int vec_len_out) -> zero_pad_cc_sptr"""
        return _xcorr_swig.zero_pad_cc_sptr_make(self, vec_len_in, vec_len_out)


    def history(self):
        """history(zero_pad_cc_sptr self) -> unsigned int"""
        return _xcorr_swig.zero_pad_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(zero_pad_cc_sptr self, int which, int delay)
        declare_sample_delay(zero_pad_cc_sptr self, unsigned int delay)
        """
        return _xcorr_swig.zero_pad_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(zero_pad_cc_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.zero_pad_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(zero_pad_cc_sptr self) -> int"""
        return _xcorr_swig.zero_pad_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(zero_pad_cc_sptr self) -> double"""
        return _xcorr_swig.zero_pad_cc_sptr_relative_rate(self)


    def start(self):
        """start(zero_pad_cc_sptr self) -> bool"""
        return _xcorr_swig.zero_pad_cc_sptr_start(self)


    def stop(self):
        """stop(zero_pad_cc_sptr self) -> bool"""
        return _xcorr_swig.zero_pad_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(zero_pad_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.zero_pad_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(zero_pad_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.zero_pad_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(zero_pad_cc_sptr self) -> int"""
        return _xcorr_swig.zero_pad_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(zero_pad_cc_sptr self, int m)"""
        return _xcorr_swig.zero_pad_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(zero_pad_cc_sptr self)"""
        return _xcorr_swig.zero_pad_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(zero_pad_cc_sptr self) -> bool"""
        return _xcorr_swig.zero_pad_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(zero_pad_cc_sptr self, int m)"""
        return _xcorr_swig.zero_pad_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(zero_pad_cc_sptr self) -> int"""
        return _xcorr_swig.zero_pad_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(zero_pad_cc_sptr self, int i) -> long"""
        return _xcorr_swig.zero_pad_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(zero_pad_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(zero_pad_cc_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.zero_pad_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(zero_pad_cc_sptr self, int i) -> long"""
        return _xcorr_swig.zero_pad_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(zero_pad_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(zero_pad_cc_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.zero_pad_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(zero_pad_cc_sptr self) -> float"""
        return _xcorr_swig.zero_pad_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(zero_pad_cc_sptr self) -> float"""
        return _xcorr_swig.zero_pad_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(zero_pad_cc_sptr self) -> float"""
        return _xcorr_swig.zero_pad_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(zero_pad_cc_sptr self) -> float"""
        return _xcorr_swig.zero_pad_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(zero_pad_cc_sptr self) -> float"""
        return _xcorr_swig.zero_pad_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(zero_pad_cc_sptr self) -> float"""
        return _xcorr_swig.zero_pad_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(zero_pad_cc_sptr self, int which) -> float
        pc_input_buffers_full(zero_pad_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.zero_pad_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(zero_pad_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(zero_pad_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.zero_pad_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(zero_pad_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(zero_pad_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.zero_pad_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(zero_pad_cc_sptr self, int which) -> float
        pc_output_buffers_full(zero_pad_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.zero_pad_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(zero_pad_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(zero_pad_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.zero_pad_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(zero_pad_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(zero_pad_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.zero_pad_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(zero_pad_cc_sptr self) -> float"""
        return _xcorr_swig.zero_pad_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(zero_pad_cc_sptr self) -> float"""
        return _xcorr_swig.zero_pad_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(zero_pad_cc_sptr self) -> float"""
        return _xcorr_swig.zero_pad_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(zero_pad_cc_sptr self) -> float"""
        return _xcorr_swig.zero_pad_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(zero_pad_cc_sptr self) -> float"""
        return _xcorr_swig.zero_pad_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(zero_pad_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.zero_pad_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(zero_pad_cc_sptr self)"""
        return _xcorr_swig.zero_pad_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(zero_pad_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.zero_pad_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(zero_pad_cc_sptr self) -> int"""
        return _xcorr_swig.zero_pad_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(zero_pad_cc_sptr self) -> int"""
        return _xcorr_swig.zero_pad_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(zero_pad_cc_sptr self, int priority) -> int"""
        return _xcorr_swig.zero_pad_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(zero_pad_cc_sptr self) -> std::string"""
        return _xcorr_swig.zero_pad_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(zero_pad_cc_sptr self) -> std::string"""
        return _xcorr_swig.zero_pad_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(zero_pad_cc_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.zero_pad_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(zero_pad_cc_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.zero_pad_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(zero_pad_cc_sptr self) -> long"""
        return _xcorr_swig.zero_pad_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(zero_pad_cc_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.zero_pad_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(zero_pad_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.zero_pad_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(zero_pad_cc_sptr self) -> std::string"""
        return _xcorr_swig.zero_pad_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(zero_pad_cc_sptr self, std::string name)"""
        return _xcorr_swig.zero_pad_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(zero_pad_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.zero_pad_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(zero_pad_cc_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.zero_pad_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(zero_pad_cc_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.zero_pad_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(zero_pad_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.zero_pad_cc_sptr_message_subscribers(self, which_port)

zero_pad_cc_sptr_swigregister = _xcorr_swig.zero_pad_cc_sptr_swigregister
zero_pad_cc_sptr_swigregister(zero_pad_cc_sptr)


zero_pad_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
zero_pad_cc = zero_pad_cc.make;

class sample_offset_cci(object):
    """Proxy of C++ gr::xcorr::sample_offset_cci class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vector_len, num_xcorr):
        """make(int vector_len, int num_xcorr) -> sample_offset_cci_sptr"""
        return _xcorr_swig.sample_offset_cci_make(vector_len, num_xcorr)

    make = staticmethod(make)
    __swig_destroy__ = _xcorr_swig.delete_sample_offset_cci
    __del__ = lambda self: None
sample_offset_cci_swigregister = _xcorr_swig.sample_offset_cci_swigregister
sample_offset_cci_swigregister(sample_offset_cci)

def sample_offset_cci_make(vector_len, num_xcorr):
    """sample_offset_cci_make(int vector_len, int num_xcorr) -> sample_offset_cci_sptr"""
    return _xcorr_swig.sample_offset_cci_make(vector_len, num_xcorr)

class sample_offset_cci_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::sample_offset_cci)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::sample_offset_cci)> self) -> sample_offset_cci_sptr
        __init__(boost::shared_ptr<(gr::xcorr::sample_offset_cci)> self, sample_offset_cci p) -> sample_offset_cci_sptr
        """
        this = _xcorr_swig.new_sample_offset_cci_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(sample_offset_cci_sptr self) -> sample_offset_cci"""
        return _xcorr_swig.sample_offset_cci_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_sample_offset_cci_sptr
    __del__ = lambda self: None

    def make(self, vector_len, num_xcorr):
        """make(sample_offset_cci_sptr self, int vector_len, int num_xcorr) -> sample_offset_cci_sptr"""
        return _xcorr_swig.sample_offset_cci_sptr_make(self, vector_len, num_xcorr)


    def history(self):
        """history(sample_offset_cci_sptr self) -> unsigned int"""
        return _xcorr_swig.sample_offset_cci_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sample_offset_cci_sptr self, int which, int delay)
        declare_sample_delay(sample_offset_cci_sptr self, unsigned int delay)
        """
        return _xcorr_swig.sample_offset_cci_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(sample_offset_cci_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.sample_offset_cci_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(sample_offset_cci_sptr self) -> int"""
        return _xcorr_swig.sample_offset_cci_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(sample_offset_cci_sptr self) -> double"""
        return _xcorr_swig.sample_offset_cci_sptr_relative_rate(self)


    def start(self):
        """start(sample_offset_cci_sptr self) -> bool"""
        return _xcorr_swig.sample_offset_cci_sptr_start(self)


    def stop(self):
        """stop(sample_offset_cci_sptr self) -> bool"""
        return _xcorr_swig.sample_offset_cci_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(sample_offset_cci_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.sample_offset_cci_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(sample_offset_cci_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.sample_offset_cci_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(sample_offset_cci_sptr self) -> int"""
        return _xcorr_swig.sample_offset_cci_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(sample_offset_cci_sptr self, int m)"""
        return _xcorr_swig.sample_offset_cci_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sample_offset_cci_sptr self)"""
        return _xcorr_swig.sample_offset_cci_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sample_offset_cci_sptr self) -> bool"""
        return _xcorr_swig.sample_offset_cci_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(sample_offset_cci_sptr self, int m)"""
        return _xcorr_swig.sample_offset_cci_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(sample_offset_cci_sptr self) -> int"""
        return _xcorr_swig.sample_offset_cci_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(sample_offset_cci_sptr self, int i) -> long"""
        return _xcorr_swig.sample_offset_cci_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sample_offset_cci_sptr self, long max_output_buffer)
        set_max_output_buffer(sample_offset_cci_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.sample_offset_cci_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(sample_offset_cci_sptr self, int i) -> long"""
        return _xcorr_swig.sample_offset_cci_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sample_offset_cci_sptr self, long min_output_buffer)
        set_min_output_buffer(sample_offset_cci_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.sample_offset_cci_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(sample_offset_cci_sptr self) -> float"""
        return _xcorr_swig.sample_offset_cci_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sample_offset_cci_sptr self) -> float"""
        return _xcorr_swig.sample_offset_cci_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sample_offset_cci_sptr self) -> float"""
        return _xcorr_swig.sample_offset_cci_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(sample_offset_cci_sptr self) -> float"""
        return _xcorr_swig.sample_offset_cci_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sample_offset_cci_sptr self) -> float"""
        return _xcorr_swig.sample_offset_cci_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(sample_offset_cci_sptr self) -> float"""
        return _xcorr_swig.sample_offset_cci_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sample_offset_cci_sptr self, int which) -> float
        pc_input_buffers_full(sample_offset_cci_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.sample_offset_cci_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sample_offset_cci_sptr self, int which) -> float
        pc_input_buffers_full_avg(sample_offset_cci_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.sample_offset_cci_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sample_offset_cci_sptr self, int which) -> float
        pc_input_buffers_full_var(sample_offset_cci_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.sample_offset_cci_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sample_offset_cci_sptr self, int which) -> float
        pc_output_buffers_full(sample_offset_cci_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.sample_offset_cci_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sample_offset_cci_sptr self, int which) -> float
        pc_output_buffers_full_avg(sample_offset_cci_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.sample_offset_cci_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sample_offset_cci_sptr self, int which) -> float
        pc_output_buffers_full_var(sample_offset_cci_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.sample_offset_cci_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(sample_offset_cci_sptr self) -> float"""
        return _xcorr_swig.sample_offset_cci_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(sample_offset_cci_sptr self) -> float"""
        return _xcorr_swig.sample_offset_cci_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(sample_offset_cci_sptr self) -> float"""
        return _xcorr_swig.sample_offset_cci_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(sample_offset_cci_sptr self) -> float"""
        return _xcorr_swig.sample_offset_cci_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(sample_offset_cci_sptr self) -> float"""
        return _xcorr_swig.sample_offset_cci_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(sample_offset_cci_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.sample_offset_cci_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(sample_offset_cci_sptr self)"""
        return _xcorr_swig.sample_offset_cci_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(sample_offset_cci_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.sample_offset_cci_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(sample_offset_cci_sptr self) -> int"""
        return _xcorr_swig.sample_offset_cci_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(sample_offset_cci_sptr self) -> int"""
        return _xcorr_swig.sample_offset_cci_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(sample_offset_cci_sptr self, int priority) -> int"""
        return _xcorr_swig.sample_offset_cci_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(sample_offset_cci_sptr self) -> std::string"""
        return _xcorr_swig.sample_offset_cci_sptr_name(self)


    def symbol_name(self):
        """symbol_name(sample_offset_cci_sptr self) -> std::string"""
        return _xcorr_swig.sample_offset_cci_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(sample_offset_cci_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.sample_offset_cci_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(sample_offset_cci_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.sample_offset_cci_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(sample_offset_cci_sptr self) -> long"""
        return _xcorr_swig.sample_offset_cci_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(sample_offset_cci_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.sample_offset_cci_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(sample_offset_cci_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.sample_offset_cci_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(sample_offset_cci_sptr self) -> std::string"""
        return _xcorr_swig.sample_offset_cci_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(sample_offset_cci_sptr self, std::string name)"""
        return _xcorr_swig.sample_offset_cci_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(sample_offset_cci_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.sample_offset_cci_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(sample_offset_cci_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.sample_offset_cci_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(sample_offset_cci_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.sample_offset_cci_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(sample_offset_cci_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.sample_offset_cci_sptr_message_subscribers(self, which_port)

sample_offset_cci_sptr_swigregister = _xcorr_swig.sample_offset_cci_sptr_swigregister
sample_offset_cci_sptr_swigregister(sample_offset_cci_sptr)


sample_offset_cci_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sample_offset_cci = sample_offset_cci.make;

class hold_ii(object):
    """Proxy of C++ gr::xcorr::hold_ii class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(hold):
        """make(bool hold) -> hold_ii_sptr"""
        return _xcorr_swig.hold_ii_make(hold)

    make = staticmethod(make)

    def set_hold(self, new_hold):
        """set_hold(hold_ii self, bool new_hold)"""
        return _xcorr_swig.hold_ii_set_hold(self, new_hold)


    def get_hold(self):
        """get_hold(hold_ii self) -> bool"""
        return _xcorr_swig.hold_ii_get_hold(self)

    __swig_destroy__ = _xcorr_swig.delete_hold_ii
    __del__ = lambda self: None
hold_ii_swigregister = _xcorr_swig.hold_ii_swigregister
hold_ii_swigregister(hold_ii)

def hold_ii_make(hold):
    """hold_ii_make(bool hold) -> hold_ii_sptr"""
    return _xcorr_swig.hold_ii_make(hold)

class hold_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::hold_ii)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::hold_ii)> self) -> hold_ii_sptr
        __init__(boost::shared_ptr<(gr::xcorr::hold_ii)> self, hold_ii p) -> hold_ii_sptr
        """
        this = _xcorr_swig.new_hold_ii_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(hold_ii_sptr self) -> hold_ii"""
        return _xcorr_swig.hold_ii_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_hold_ii_sptr
    __del__ = lambda self: None

    def make(self, hold):
        """make(hold_ii_sptr self, bool hold) -> hold_ii_sptr"""
        return _xcorr_swig.hold_ii_sptr_make(self, hold)


    def set_hold(self, new_hold):
        """set_hold(hold_ii_sptr self, bool new_hold)"""
        return _xcorr_swig.hold_ii_sptr_set_hold(self, new_hold)


    def get_hold(self):
        """get_hold(hold_ii_sptr self) -> bool"""
        return _xcorr_swig.hold_ii_sptr_get_hold(self)


    def history(self):
        """history(hold_ii_sptr self) -> unsigned int"""
        return _xcorr_swig.hold_ii_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(hold_ii_sptr self, int which, int delay)
        declare_sample_delay(hold_ii_sptr self, unsigned int delay)
        """
        return _xcorr_swig.hold_ii_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(hold_ii_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.hold_ii_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(hold_ii_sptr self) -> int"""
        return _xcorr_swig.hold_ii_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(hold_ii_sptr self) -> double"""
        return _xcorr_swig.hold_ii_sptr_relative_rate(self)


    def start(self):
        """start(hold_ii_sptr self) -> bool"""
        return _xcorr_swig.hold_ii_sptr_start(self)


    def stop(self):
        """stop(hold_ii_sptr self) -> bool"""
        return _xcorr_swig.hold_ii_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(hold_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.hold_ii_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(hold_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.hold_ii_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(hold_ii_sptr self) -> int"""
        return _xcorr_swig.hold_ii_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(hold_ii_sptr self, int m)"""
        return _xcorr_swig.hold_ii_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(hold_ii_sptr self)"""
        return _xcorr_swig.hold_ii_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(hold_ii_sptr self) -> bool"""
        return _xcorr_swig.hold_ii_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(hold_ii_sptr self, int m)"""
        return _xcorr_swig.hold_ii_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(hold_ii_sptr self) -> int"""
        return _xcorr_swig.hold_ii_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(hold_ii_sptr self, int i) -> long"""
        return _xcorr_swig.hold_ii_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(hold_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(hold_ii_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.hold_ii_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(hold_ii_sptr self, int i) -> long"""
        return _xcorr_swig.hold_ii_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(hold_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(hold_ii_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.hold_ii_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(hold_ii_sptr self) -> float"""
        return _xcorr_swig.hold_ii_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(hold_ii_sptr self) -> float"""
        return _xcorr_swig.hold_ii_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(hold_ii_sptr self) -> float"""
        return _xcorr_swig.hold_ii_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(hold_ii_sptr self) -> float"""
        return _xcorr_swig.hold_ii_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(hold_ii_sptr self) -> float"""
        return _xcorr_swig.hold_ii_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(hold_ii_sptr self) -> float"""
        return _xcorr_swig.hold_ii_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(hold_ii_sptr self, int which) -> float
        pc_input_buffers_full(hold_ii_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_ii_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(hold_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(hold_ii_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_ii_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(hold_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(hold_ii_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_ii_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(hold_ii_sptr self, int which) -> float
        pc_output_buffers_full(hold_ii_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_ii_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(hold_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(hold_ii_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_ii_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(hold_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(hold_ii_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_ii_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(hold_ii_sptr self) -> float"""
        return _xcorr_swig.hold_ii_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(hold_ii_sptr self) -> float"""
        return _xcorr_swig.hold_ii_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(hold_ii_sptr self) -> float"""
        return _xcorr_swig.hold_ii_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(hold_ii_sptr self) -> float"""
        return _xcorr_swig.hold_ii_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(hold_ii_sptr self) -> float"""
        return _xcorr_swig.hold_ii_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(hold_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.hold_ii_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(hold_ii_sptr self)"""
        return _xcorr_swig.hold_ii_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(hold_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.hold_ii_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(hold_ii_sptr self) -> int"""
        return _xcorr_swig.hold_ii_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(hold_ii_sptr self) -> int"""
        return _xcorr_swig.hold_ii_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(hold_ii_sptr self, int priority) -> int"""
        return _xcorr_swig.hold_ii_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(hold_ii_sptr self) -> std::string"""
        return _xcorr_swig.hold_ii_sptr_name(self)


    def symbol_name(self):
        """symbol_name(hold_ii_sptr self) -> std::string"""
        return _xcorr_swig.hold_ii_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(hold_ii_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.hold_ii_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(hold_ii_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.hold_ii_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(hold_ii_sptr self) -> long"""
        return _xcorr_swig.hold_ii_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(hold_ii_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.hold_ii_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(hold_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.hold_ii_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(hold_ii_sptr self) -> std::string"""
        return _xcorr_swig.hold_ii_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(hold_ii_sptr self, std::string name)"""
        return _xcorr_swig.hold_ii_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(hold_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.hold_ii_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(hold_ii_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.hold_ii_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(hold_ii_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.hold_ii_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(hold_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.hold_ii_sptr_message_subscribers(self, which_port)

hold_ii_sptr_swigregister = _xcorr_swig.hold_ii_sptr_swigregister
hold_ii_sptr_swigregister(hold_ii_sptr)


hold_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
hold_ii = hold_ii.make;

class hold_ff(object):
    """Proxy of C++ gr::xcorr::hold_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(hold):
        """make(bool hold) -> hold_ff_sptr"""
        return _xcorr_swig.hold_ff_make(hold)

    make = staticmethod(make)

    def set_hold(self, new_hold):
        """set_hold(hold_ff self, bool new_hold)"""
        return _xcorr_swig.hold_ff_set_hold(self, new_hold)


    def get_hold(self):
        """get_hold(hold_ff self) -> bool"""
        return _xcorr_swig.hold_ff_get_hold(self)

    __swig_destroy__ = _xcorr_swig.delete_hold_ff
    __del__ = lambda self: None
hold_ff_swigregister = _xcorr_swig.hold_ff_swigregister
hold_ff_swigregister(hold_ff)

def hold_ff_make(hold):
    """hold_ff_make(bool hold) -> hold_ff_sptr"""
    return _xcorr_swig.hold_ff_make(hold)

class hold_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::hold_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::hold_ff)> self) -> hold_ff_sptr
        __init__(boost::shared_ptr<(gr::xcorr::hold_ff)> self, hold_ff p) -> hold_ff_sptr
        """
        this = _xcorr_swig.new_hold_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(hold_ff_sptr self) -> hold_ff"""
        return _xcorr_swig.hold_ff_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_hold_ff_sptr
    __del__ = lambda self: None

    def make(self, hold):
        """make(hold_ff_sptr self, bool hold) -> hold_ff_sptr"""
        return _xcorr_swig.hold_ff_sptr_make(self, hold)


    def set_hold(self, new_hold):
        """set_hold(hold_ff_sptr self, bool new_hold)"""
        return _xcorr_swig.hold_ff_sptr_set_hold(self, new_hold)


    def get_hold(self):
        """get_hold(hold_ff_sptr self) -> bool"""
        return _xcorr_swig.hold_ff_sptr_get_hold(self)


    def history(self):
        """history(hold_ff_sptr self) -> unsigned int"""
        return _xcorr_swig.hold_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(hold_ff_sptr self, int which, int delay)
        declare_sample_delay(hold_ff_sptr self, unsigned int delay)
        """
        return _xcorr_swig.hold_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(hold_ff_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.hold_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(hold_ff_sptr self) -> int"""
        return _xcorr_swig.hold_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(hold_ff_sptr self) -> double"""
        return _xcorr_swig.hold_ff_sptr_relative_rate(self)


    def start(self):
        """start(hold_ff_sptr self) -> bool"""
        return _xcorr_swig.hold_ff_sptr_start(self)


    def stop(self):
        """stop(hold_ff_sptr self) -> bool"""
        return _xcorr_swig.hold_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(hold_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.hold_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(hold_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.hold_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(hold_ff_sptr self) -> int"""
        return _xcorr_swig.hold_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(hold_ff_sptr self, int m)"""
        return _xcorr_swig.hold_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(hold_ff_sptr self)"""
        return _xcorr_swig.hold_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(hold_ff_sptr self) -> bool"""
        return _xcorr_swig.hold_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(hold_ff_sptr self, int m)"""
        return _xcorr_swig.hold_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(hold_ff_sptr self) -> int"""
        return _xcorr_swig.hold_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(hold_ff_sptr self, int i) -> long"""
        return _xcorr_swig.hold_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(hold_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(hold_ff_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.hold_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(hold_ff_sptr self, int i) -> long"""
        return _xcorr_swig.hold_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(hold_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(hold_ff_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.hold_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(hold_ff_sptr self) -> float"""
        return _xcorr_swig.hold_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(hold_ff_sptr self) -> float"""
        return _xcorr_swig.hold_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(hold_ff_sptr self) -> float"""
        return _xcorr_swig.hold_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(hold_ff_sptr self) -> float"""
        return _xcorr_swig.hold_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(hold_ff_sptr self) -> float"""
        return _xcorr_swig.hold_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(hold_ff_sptr self) -> float"""
        return _xcorr_swig.hold_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(hold_ff_sptr self, int which) -> float
        pc_input_buffers_full(hold_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(hold_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(hold_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(hold_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(hold_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(hold_ff_sptr self, int which) -> float
        pc_output_buffers_full(hold_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(hold_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(hold_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(hold_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(hold_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(hold_ff_sptr self) -> float"""
        return _xcorr_swig.hold_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(hold_ff_sptr self) -> float"""
        return _xcorr_swig.hold_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(hold_ff_sptr self) -> float"""
        return _xcorr_swig.hold_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(hold_ff_sptr self) -> float"""
        return _xcorr_swig.hold_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(hold_ff_sptr self) -> float"""
        return _xcorr_swig.hold_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(hold_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.hold_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(hold_ff_sptr self)"""
        return _xcorr_swig.hold_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(hold_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.hold_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(hold_ff_sptr self) -> int"""
        return _xcorr_swig.hold_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(hold_ff_sptr self) -> int"""
        return _xcorr_swig.hold_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(hold_ff_sptr self, int priority) -> int"""
        return _xcorr_swig.hold_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(hold_ff_sptr self) -> std::string"""
        return _xcorr_swig.hold_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(hold_ff_sptr self) -> std::string"""
        return _xcorr_swig.hold_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(hold_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.hold_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(hold_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.hold_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(hold_ff_sptr self) -> long"""
        return _xcorr_swig.hold_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(hold_ff_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.hold_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(hold_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.hold_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(hold_ff_sptr self) -> std::string"""
        return _xcorr_swig.hold_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(hold_ff_sptr self, std::string name)"""
        return _xcorr_swig.hold_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(hold_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.hold_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(hold_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.hold_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(hold_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.hold_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(hold_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.hold_ff_sptr_message_subscribers(self, which_port)

hold_ff_sptr_swigregister = _xcorr_swig.hold_ff_sptr_swigregister
hold_ff_sptr_swigregister(hold_ff_sptr)


hold_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
hold_ff = hold_ff.make;

class full_capon_ccf(object):
    """Proxy of C++ gr::xcorr::full_capon_ccf class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vec_in, vec_out):
        """make(int vec_in, int vec_out) -> full_capon_ccf_sptr"""
        return _xcorr_swig.full_capon_ccf_make(vec_in, vec_out)

    make = staticmethod(make)
    __swig_destroy__ = _xcorr_swig.delete_full_capon_ccf
    __del__ = lambda self: None
full_capon_ccf_swigregister = _xcorr_swig.full_capon_ccf_swigregister
full_capon_ccf_swigregister(full_capon_ccf)

def full_capon_ccf_make(vec_in, vec_out):
    """full_capon_ccf_make(int vec_in, int vec_out) -> full_capon_ccf_sptr"""
    return _xcorr_swig.full_capon_ccf_make(vec_in, vec_out)

class full_capon_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::full_capon_ccf)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::full_capon_ccf)> self) -> full_capon_ccf_sptr
        __init__(boost::shared_ptr<(gr::xcorr::full_capon_ccf)> self, full_capon_ccf p) -> full_capon_ccf_sptr
        """
        this = _xcorr_swig.new_full_capon_ccf_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(full_capon_ccf_sptr self) -> full_capon_ccf"""
        return _xcorr_swig.full_capon_ccf_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_full_capon_ccf_sptr
    __del__ = lambda self: None

    def make(self, vec_in, vec_out):
        """make(full_capon_ccf_sptr self, int vec_in, int vec_out) -> full_capon_ccf_sptr"""
        return _xcorr_swig.full_capon_ccf_sptr_make(self, vec_in, vec_out)


    def history(self):
        """history(full_capon_ccf_sptr self) -> unsigned int"""
        return _xcorr_swig.full_capon_ccf_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(full_capon_ccf_sptr self, int which, int delay)
        declare_sample_delay(full_capon_ccf_sptr self, unsigned int delay)
        """
        return _xcorr_swig.full_capon_ccf_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(full_capon_ccf_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.full_capon_ccf_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(full_capon_ccf_sptr self) -> int"""
        return _xcorr_swig.full_capon_ccf_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(full_capon_ccf_sptr self) -> double"""
        return _xcorr_swig.full_capon_ccf_sptr_relative_rate(self)


    def start(self):
        """start(full_capon_ccf_sptr self) -> bool"""
        return _xcorr_swig.full_capon_ccf_sptr_start(self)


    def stop(self):
        """stop(full_capon_ccf_sptr self) -> bool"""
        return _xcorr_swig.full_capon_ccf_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(full_capon_ccf_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.full_capon_ccf_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(full_capon_ccf_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.full_capon_ccf_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(full_capon_ccf_sptr self) -> int"""
        return _xcorr_swig.full_capon_ccf_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(full_capon_ccf_sptr self, int m)"""
        return _xcorr_swig.full_capon_ccf_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(full_capon_ccf_sptr self)"""
        return _xcorr_swig.full_capon_ccf_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(full_capon_ccf_sptr self) -> bool"""
        return _xcorr_swig.full_capon_ccf_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(full_capon_ccf_sptr self, int m)"""
        return _xcorr_swig.full_capon_ccf_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(full_capon_ccf_sptr self) -> int"""
        return _xcorr_swig.full_capon_ccf_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(full_capon_ccf_sptr self, int i) -> long"""
        return _xcorr_swig.full_capon_ccf_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(full_capon_ccf_sptr self, long max_output_buffer)
        set_max_output_buffer(full_capon_ccf_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.full_capon_ccf_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(full_capon_ccf_sptr self, int i) -> long"""
        return _xcorr_swig.full_capon_ccf_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(full_capon_ccf_sptr self, long min_output_buffer)
        set_min_output_buffer(full_capon_ccf_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.full_capon_ccf_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(full_capon_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon_ccf_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(full_capon_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon_ccf_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(full_capon_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon_ccf_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(full_capon_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon_ccf_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(full_capon_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon_ccf_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(full_capon_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon_ccf_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(full_capon_ccf_sptr self, int which) -> float
        pc_input_buffers_full(full_capon_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.full_capon_ccf_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(full_capon_ccf_sptr self, int which) -> float
        pc_input_buffers_full_avg(full_capon_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.full_capon_ccf_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(full_capon_ccf_sptr self, int which) -> float
        pc_input_buffers_full_var(full_capon_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.full_capon_ccf_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(full_capon_ccf_sptr self, int which) -> float
        pc_output_buffers_full(full_capon_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.full_capon_ccf_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(full_capon_ccf_sptr self, int which) -> float
        pc_output_buffers_full_avg(full_capon_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.full_capon_ccf_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(full_capon_ccf_sptr self, int which) -> float
        pc_output_buffers_full_var(full_capon_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.full_capon_ccf_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(full_capon_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon_ccf_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(full_capon_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon_ccf_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(full_capon_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon_ccf_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(full_capon_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon_ccf_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(full_capon_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon_ccf_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(full_capon_ccf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.full_capon_ccf_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(full_capon_ccf_sptr self)"""
        return _xcorr_swig.full_capon_ccf_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(full_capon_ccf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.full_capon_ccf_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(full_capon_ccf_sptr self) -> int"""
        return _xcorr_swig.full_capon_ccf_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(full_capon_ccf_sptr self) -> int"""
        return _xcorr_swig.full_capon_ccf_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(full_capon_ccf_sptr self, int priority) -> int"""
        return _xcorr_swig.full_capon_ccf_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(full_capon_ccf_sptr self) -> std::string"""
        return _xcorr_swig.full_capon_ccf_sptr_name(self)


    def symbol_name(self):
        """symbol_name(full_capon_ccf_sptr self) -> std::string"""
        return _xcorr_swig.full_capon_ccf_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(full_capon_ccf_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.full_capon_ccf_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(full_capon_ccf_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.full_capon_ccf_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(full_capon_ccf_sptr self) -> long"""
        return _xcorr_swig.full_capon_ccf_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(full_capon_ccf_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.full_capon_ccf_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(full_capon_ccf_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.full_capon_ccf_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(full_capon_ccf_sptr self) -> std::string"""
        return _xcorr_swig.full_capon_ccf_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(full_capon_ccf_sptr self, std::string name)"""
        return _xcorr_swig.full_capon_ccf_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(full_capon_ccf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.full_capon_ccf_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(full_capon_ccf_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.full_capon_ccf_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(full_capon_ccf_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.full_capon_ccf_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(full_capon_ccf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.full_capon_ccf_sptr_message_subscribers(self, which_port)

full_capon_ccf_sptr_swigregister = _xcorr_swig.full_capon_ccf_sptr_swigregister
full_capon_ccf_sptr_swigregister(full_capon_ccf_sptr)


full_capon_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
full_capon_ccf = full_capon_ccf.make;

class full_capon3_ccf(object):
    """Proxy of C++ gr::xcorr::full_capon3_ccf class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vec_in, vec_out):
        """make(int vec_in, int vec_out) -> full_capon3_ccf_sptr"""
        return _xcorr_swig.full_capon3_ccf_make(vec_in, vec_out)

    make = staticmethod(make)
    __swig_destroy__ = _xcorr_swig.delete_full_capon3_ccf
    __del__ = lambda self: None
full_capon3_ccf_swigregister = _xcorr_swig.full_capon3_ccf_swigregister
full_capon3_ccf_swigregister(full_capon3_ccf)

def full_capon3_ccf_make(vec_in, vec_out):
    """full_capon3_ccf_make(int vec_in, int vec_out) -> full_capon3_ccf_sptr"""
    return _xcorr_swig.full_capon3_ccf_make(vec_in, vec_out)

class full_capon3_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::full_capon3_ccf)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::full_capon3_ccf)> self) -> full_capon3_ccf_sptr
        __init__(boost::shared_ptr<(gr::xcorr::full_capon3_ccf)> self, full_capon3_ccf p) -> full_capon3_ccf_sptr
        """
        this = _xcorr_swig.new_full_capon3_ccf_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(full_capon3_ccf_sptr self) -> full_capon3_ccf"""
        return _xcorr_swig.full_capon3_ccf_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_full_capon3_ccf_sptr
    __del__ = lambda self: None

    def make(self, vec_in, vec_out):
        """make(full_capon3_ccf_sptr self, int vec_in, int vec_out) -> full_capon3_ccf_sptr"""
        return _xcorr_swig.full_capon3_ccf_sptr_make(self, vec_in, vec_out)


    def history(self):
        """history(full_capon3_ccf_sptr self) -> unsigned int"""
        return _xcorr_swig.full_capon3_ccf_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(full_capon3_ccf_sptr self, int which, int delay)
        declare_sample_delay(full_capon3_ccf_sptr self, unsigned int delay)
        """
        return _xcorr_swig.full_capon3_ccf_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(full_capon3_ccf_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.full_capon3_ccf_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(full_capon3_ccf_sptr self) -> int"""
        return _xcorr_swig.full_capon3_ccf_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(full_capon3_ccf_sptr self) -> double"""
        return _xcorr_swig.full_capon3_ccf_sptr_relative_rate(self)


    def start(self):
        """start(full_capon3_ccf_sptr self) -> bool"""
        return _xcorr_swig.full_capon3_ccf_sptr_start(self)


    def stop(self):
        """stop(full_capon3_ccf_sptr self) -> bool"""
        return _xcorr_swig.full_capon3_ccf_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(full_capon3_ccf_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.full_capon3_ccf_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(full_capon3_ccf_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.full_capon3_ccf_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(full_capon3_ccf_sptr self) -> int"""
        return _xcorr_swig.full_capon3_ccf_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(full_capon3_ccf_sptr self, int m)"""
        return _xcorr_swig.full_capon3_ccf_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(full_capon3_ccf_sptr self)"""
        return _xcorr_swig.full_capon3_ccf_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(full_capon3_ccf_sptr self) -> bool"""
        return _xcorr_swig.full_capon3_ccf_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(full_capon3_ccf_sptr self, int m)"""
        return _xcorr_swig.full_capon3_ccf_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(full_capon3_ccf_sptr self) -> int"""
        return _xcorr_swig.full_capon3_ccf_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(full_capon3_ccf_sptr self, int i) -> long"""
        return _xcorr_swig.full_capon3_ccf_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(full_capon3_ccf_sptr self, long max_output_buffer)
        set_max_output_buffer(full_capon3_ccf_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.full_capon3_ccf_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(full_capon3_ccf_sptr self, int i) -> long"""
        return _xcorr_swig.full_capon3_ccf_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(full_capon3_ccf_sptr self, long min_output_buffer)
        set_min_output_buffer(full_capon3_ccf_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.full_capon3_ccf_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(full_capon3_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon3_ccf_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(full_capon3_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon3_ccf_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(full_capon3_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon3_ccf_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(full_capon3_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon3_ccf_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(full_capon3_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon3_ccf_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(full_capon3_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon3_ccf_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(full_capon3_ccf_sptr self, int which) -> float
        pc_input_buffers_full(full_capon3_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.full_capon3_ccf_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(full_capon3_ccf_sptr self, int which) -> float
        pc_input_buffers_full_avg(full_capon3_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.full_capon3_ccf_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(full_capon3_ccf_sptr self, int which) -> float
        pc_input_buffers_full_var(full_capon3_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.full_capon3_ccf_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(full_capon3_ccf_sptr self, int which) -> float
        pc_output_buffers_full(full_capon3_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.full_capon3_ccf_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(full_capon3_ccf_sptr self, int which) -> float
        pc_output_buffers_full_avg(full_capon3_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.full_capon3_ccf_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(full_capon3_ccf_sptr self, int which) -> float
        pc_output_buffers_full_var(full_capon3_ccf_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.full_capon3_ccf_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(full_capon3_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon3_ccf_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(full_capon3_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon3_ccf_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(full_capon3_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon3_ccf_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(full_capon3_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon3_ccf_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(full_capon3_ccf_sptr self) -> float"""
        return _xcorr_swig.full_capon3_ccf_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(full_capon3_ccf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.full_capon3_ccf_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(full_capon3_ccf_sptr self)"""
        return _xcorr_swig.full_capon3_ccf_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(full_capon3_ccf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.full_capon3_ccf_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(full_capon3_ccf_sptr self) -> int"""
        return _xcorr_swig.full_capon3_ccf_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(full_capon3_ccf_sptr self) -> int"""
        return _xcorr_swig.full_capon3_ccf_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(full_capon3_ccf_sptr self, int priority) -> int"""
        return _xcorr_swig.full_capon3_ccf_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(full_capon3_ccf_sptr self) -> std::string"""
        return _xcorr_swig.full_capon3_ccf_sptr_name(self)


    def symbol_name(self):
        """symbol_name(full_capon3_ccf_sptr self) -> std::string"""
        return _xcorr_swig.full_capon3_ccf_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(full_capon3_ccf_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.full_capon3_ccf_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(full_capon3_ccf_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.full_capon3_ccf_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(full_capon3_ccf_sptr self) -> long"""
        return _xcorr_swig.full_capon3_ccf_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(full_capon3_ccf_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.full_capon3_ccf_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(full_capon3_ccf_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.full_capon3_ccf_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(full_capon3_ccf_sptr self) -> std::string"""
        return _xcorr_swig.full_capon3_ccf_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(full_capon3_ccf_sptr self, std::string name)"""
        return _xcorr_swig.full_capon3_ccf_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(full_capon3_ccf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.full_capon3_ccf_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(full_capon3_ccf_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.full_capon3_ccf_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(full_capon3_ccf_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.full_capon3_ccf_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(full_capon3_ccf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.full_capon3_ccf_sptr_message_subscribers(self, which_port)

full_capon3_ccf_sptr_swigregister = _xcorr_swig.full_capon3_ccf_sptr_swigregister
full_capon3_ccf_sptr_swigregister(full_capon3_ccf_sptr)


full_capon3_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
full_capon3_ccf = full_capon3_ccf.make;

class multiply_exp_cc(object):
    """Proxy of C++ gr::xcorr::multiply_exp_cc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(arg):
        """make(float arg) -> multiply_exp_cc_sptr"""
        return _xcorr_swig.multiply_exp_cc_make(arg)

    make = staticmethod(make)

    def set_arg(self, arg):
        """set_arg(multiply_exp_cc self, float arg)"""
        return _xcorr_swig.multiply_exp_cc_set_arg(self, arg)

    __swig_destroy__ = _xcorr_swig.delete_multiply_exp_cc
    __del__ = lambda self: None
multiply_exp_cc_swigregister = _xcorr_swig.multiply_exp_cc_swigregister
multiply_exp_cc_swigregister(multiply_exp_cc)

def multiply_exp_cc_make(arg):
    """multiply_exp_cc_make(float arg) -> multiply_exp_cc_sptr"""
    return _xcorr_swig.multiply_exp_cc_make(arg)

class multiply_exp_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::multiply_exp_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::multiply_exp_cc)> self) -> multiply_exp_cc_sptr
        __init__(boost::shared_ptr<(gr::xcorr::multiply_exp_cc)> self, multiply_exp_cc p) -> multiply_exp_cc_sptr
        """
        this = _xcorr_swig.new_multiply_exp_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(multiply_exp_cc_sptr self) -> multiply_exp_cc"""
        return _xcorr_swig.multiply_exp_cc_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_multiply_exp_cc_sptr
    __del__ = lambda self: None

    def make(self, arg):
        """make(multiply_exp_cc_sptr self, float arg) -> multiply_exp_cc_sptr"""
        return _xcorr_swig.multiply_exp_cc_sptr_make(self, arg)


    def set_arg(self, arg):
        """set_arg(multiply_exp_cc_sptr self, float arg)"""
        return _xcorr_swig.multiply_exp_cc_sptr_set_arg(self, arg)


    def history(self):
        """history(multiply_exp_cc_sptr self) -> unsigned int"""
        return _xcorr_swig.multiply_exp_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_exp_cc_sptr self, int which, int delay)
        declare_sample_delay(multiply_exp_cc_sptr self, unsigned int delay)
        """
        return _xcorr_swig.multiply_exp_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(multiply_exp_cc_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.multiply_exp_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(multiply_exp_cc_sptr self) -> int"""
        return _xcorr_swig.multiply_exp_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(multiply_exp_cc_sptr self) -> double"""
        return _xcorr_swig.multiply_exp_cc_sptr_relative_rate(self)


    def start(self):
        """start(multiply_exp_cc_sptr self) -> bool"""
        return _xcorr_swig.multiply_exp_cc_sptr_start(self)


    def stop(self):
        """stop(multiply_exp_cc_sptr self) -> bool"""
        return _xcorr_swig.multiply_exp_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(multiply_exp_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.multiply_exp_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(multiply_exp_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.multiply_exp_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(multiply_exp_cc_sptr self) -> int"""
        return _xcorr_swig.multiply_exp_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(multiply_exp_cc_sptr self, int m)"""
        return _xcorr_swig.multiply_exp_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_exp_cc_sptr self)"""
        return _xcorr_swig.multiply_exp_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_exp_cc_sptr self) -> bool"""
        return _xcorr_swig.multiply_exp_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(multiply_exp_cc_sptr self, int m)"""
        return _xcorr_swig.multiply_exp_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(multiply_exp_cc_sptr self) -> int"""
        return _xcorr_swig.multiply_exp_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(multiply_exp_cc_sptr self, int i) -> long"""
        return _xcorr_swig.multiply_exp_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_exp_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_exp_cc_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.multiply_exp_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(multiply_exp_cc_sptr self, int i) -> long"""
        return _xcorr_swig.multiply_exp_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_exp_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_exp_cc_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.multiply_exp_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(multiply_exp_cc_sptr self) -> float"""
        return _xcorr_swig.multiply_exp_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_exp_cc_sptr self) -> float"""
        return _xcorr_swig.multiply_exp_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_exp_cc_sptr self) -> float"""
        return _xcorr_swig.multiply_exp_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(multiply_exp_cc_sptr self) -> float"""
        return _xcorr_swig.multiply_exp_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_exp_cc_sptr self) -> float"""
        return _xcorr_swig.multiply_exp_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_exp_cc_sptr self) -> float"""
        return _xcorr_swig.multiply_exp_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_exp_cc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_exp_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.multiply_exp_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_exp_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_exp_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.multiply_exp_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_exp_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_exp_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.multiply_exp_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_exp_cc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_exp_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.multiply_exp_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_exp_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_exp_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.multiply_exp_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_exp_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_exp_cc_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.multiply_exp_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(multiply_exp_cc_sptr self) -> float"""
        return _xcorr_swig.multiply_exp_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_exp_cc_sptr self) -> float"""
        return _xcorr_swig.multiply_exp_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(multiply_exp_cc_sptr self) -> float"""
        return _xcorr_swig.multiply_exp_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(multiply_exp_cc_sptr self) -> float"""
        return _xcorr_swig.multiply_exp_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_exp_cc_sptr self) -> float"""
        return _xcorr_swig.multiply_exp_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(multiply_exp_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.multiply_exp_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_exp_cc_sptr self)"""
        return _xcorr_swig.multiply_exp_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(multiply_exp_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.multiply_exp_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(multiply_exp_cc_sptr self) -> int"""
        return _xcorr_swig.multiply_exp_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(multiply_exp_cc_sptr self) -> int"""
        return _xcorr_swig.multiply_exp_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(multiply_exp_cc_sptr self, int priority) -> int"""
        return _xcorr_swig.multiply_exp_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(multiply_exp_cc_sptr self) -> std::string"""
        return _xcorr_swig.multiply_exp_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(multiply_exp_cc_sptr self) -> std::string"""
        return _xcorr_swig.multiply_exp_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(multiply_exp_cc_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.multiply_exp_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(multiply_exp_cc_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.multiply_exp_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(multiply_exp_cc_sptr self) -> long"""
        return _xcorr_swig.multiply_exp_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(multiply_exp_cc_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.multiply_exp_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(multiply_exp_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.multiply_exp_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(multiply_exp_cc_sptr self) -> std::string"""
        return _xcorr_swig.multiply_exp_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(multiply_exp_cc_sptr self, std::string name)"""
        return _xcorr_swig.multiply_exp_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(multiply_exp_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.multiply_exp_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(multiply_exp_cc_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.multiply_exp_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(multiply_exp_cc_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.multiply_exp_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(multiply_exp_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.multiply_exp_cc_sptr_message_subscribers(self, which_port)

multiply_exp_cc_sptr_swigregister = _xcorr_swig.multiply_exp_cc_sptr_swigregister
multiply_exp_cc_sptr_swigregister(multiply_exp_cc_sptr)


multiply_exp_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_exp_cc = multiply_exp_cc.make;

class pi2pi_ff(object):
    """Proxy of C++ gr::xcorr::pi2pi_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> pi2pi_ff_sptr"""
        return _xcorr_swig.pi2pi_ff_make()

    make = staticmethod(make)
    __swig_destroy__ = _xcorr_swig.delete_pi2pi_ff
    __del__ = lambda self: None
pi2pi_ff_swigregister = _xcorr_swig.pi2pi_ff_swigregister
pi2pi_ff_swigregister(pi2pi_ff)

def pi2pi_ff_make():
    """pi2pi_ff_make() -> pi2pi_ff_sptr"""
    return _xcorr_swig.pi2pi_ff_make()

class pi2pi_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::pi2pi_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::pi2pi_ff)> self) -> pi2pi_ff_sptr
        __init__(boost::shared_ptr<(gr::xcorr::pi2pi_ff)> self, pi2pi_ff p) -> pi2pi_ff_sptr
        """
        this = _xcorr_swig.new_pi2pi_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(pi2pi_ff_sptr self) -> pi2pi_ff"""
        return _xcorr_swig.pi2pi_ff_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_pi2pi_ff_sptr
    __del__ = lambda self: None

    def make(self):
        """make(pi2pi_ff_sptr self) -> pi2pi_ff_sptr"""
        return _xcorr_swig.pi2pi_ff_sptr_make(self)


    def history(self):
        """history(pi2pi_ff_sptr self) -> unsigned int"""
        return _xcorr_swig.pi2pi_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pi2pi_ff_sptr self, int which, int delay)
        declare_sample_delay(pi2pi_ff_sptr self, unsigned int delay)
        """
        return _xcorr_swig.pi2pi_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(pi2pi_ff_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.pi2pi_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(pi2pi_ff_sptr self) -> int"""
        return _xcorr_swig.pi2pi_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(pi2pi_ff_sptr self) -> double"""
        return _xcorr_swig.pi2pi_ff_sptr_relative_rate(self)


    def start(self):
        """start(pi2pi_ff_sptr self) -> bool"""
        return _xcorr_swig.pi2pi_ff_sptr_start(self)


    def stop(self):
        """stop(pi2pi_ff_sptr self) -> bool"""
        return _xcorr_swig.pi2pi_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(pi2pi_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.pi2pi_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(pi2pi_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.pi2pi_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(pi2pi_ff_sptr self) -> int"""
        return _xcorr_swig.pi2pi_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(pi2pi_ff_sptr self, int m)"""
        return _xcorr_swig.pi2pi_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pi2pi_ff_sptr self)"""
        return _xcorr_swig.pi2pi_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pi2pi_ff_sptr self) -> bool"""
        return _xcorr_swig.pi2pi_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(pi2pi_ff_sptr self, int m)"""
        return _xcorr_swig.pi2pi_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(pi2pi_ff_sptr self) -> int"""
        return _xcorr_swig.pi2pi_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(pi2pi_ff_sptr self, int i) -> long"""
        return _xcorr_swig.pi2pi_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pi2pi_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(pi2pi_ff_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.pi2pi_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(pi2pi_ff_sptr self, int i) -> long"""
        return _xcorr_swig.pi2pi_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pi2pi_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(pi2pi_ff_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.pi2pi_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(pi2pi_ff_sptr self) -> float"""
        return _xcorr_swig.pi2pi_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pi2pi_ff_sptr self) -> float"""
        return _xcorr_swig.pi2pi_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pi2pi_ff_sptr self) -> float"""
        return _xcorr_swig.pi2pi_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(pi2pi_ff_sptr self) -> float"""
        return _xcorr_swig.pi2pi_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pi2pi_ff_sptr self) -> float"""
        return _xcorr_swig.pi2pi_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(pi2pi_ff_sptr self) -> float"""
        return _xcorr_swig.pi2pi_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pi2pi_ff_sptr self, int which) -> float
        pc_input_buffers_full(pi2pi_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.pi2pi_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pi2pi_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(pi2pi_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.pi2pi_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pi2pi_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(pi2pi_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.pi2pi_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pi2pi_ff_sptr self, int which) -> float
        pc_output_buffers_full(pi2pi_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.pi2pi_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pi2pi_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(pi2pi_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.pi2pi_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pi2pi_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(pi2pi_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.pi2pi_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(pi2pi_ff_sptr self) -> float"""
        return _xcorr_swig.pi2pi_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(pi2pi_ff_sptr self) -> float"""
        return _xcorr_swig.pi2pi_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(pi2pi_ff_sptr self) -> float"""
        return _xcorr_swig.pi2pi_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(pi2pi_ff_sptr self) -> float"""
        return _xcorr_swig.pi2pi_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(pi2pi_ff_sptr self) -> float"""
        return _xcorr_swig.pi2pi_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(pi2pi_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.pi2pi_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(pi2pi_ff_sptr self)"""
        return _xcorr_swig.pi2pi_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(pi2pi_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.pi2pi_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(pi2pi_ff_sptr self) -> int"""
        return _xcorr_swig.pi2pi_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(pi2pi_ff_sptr self) -> int"""
        return _xcorr_swig.pi2pi_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(pi2pi_ff_sptr self, int priority) -> int"""
        return _xcorr_swig.pi2pi_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(pi2pi_ff_sptr self) -> std::string"""
        return _xcorr_swig.pi2pi_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(pi2pi_ff_sptr self) -> std::string"""
        return _xcorr_swig.pi2pi_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(pi2pi_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.pi2pi_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(pi2pi_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.pi2pi_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(pi2pi_ff_sptr self) -> long"""
        return _xcorr_swig.pi2pi_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(pi2pi_ff_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.pi2pi_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(pi2pi_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.pi2pi_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(pi2pi_ff_sptr self) -> std::string"""
        return _xcorr_swig.pi2pi_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(pi2pi_ff_sptr self, std::string name)"""
        return _xcorr_swig.pi2pi_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(pi2pi_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.pi2pi_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(pi2pi_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.pi2pi_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(pi2pi_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.pi2pi_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(pi2pi_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.pi2pi_ff_sptr_message_subscribers(self, which_port)

pi2pi_ff_sptr_swigregister = _xcorr_swig.pi2pi_ff_sptr_swigregister
pi2pi_ff_sptr_swigregister(pi2pi_ff_sptr)


pi2pi_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pi2pi_ff = pi2pi_ff.make;

class delay(object):
    """Proxy of C++ gr::xcorr::delay class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(itemsize, delay):
        """make(size_t itemsize, int delay) -> delay_sptr"""
        return _xcorr_swig.delay_make(itemsize, delay)

    make = staticmethod(make)

    def dly(self):
        """dly(delay self) -> int"""
        return _xcorr_swig.delay_dly(self)


    def set_dly(self, d):
        """set_dly(delay self, int d)"""
        return _xcorr_swig.delay_set_dly(self, d)

    __swig_destroy__ = _xcorr_swig.delete_delay
    __del__ = lambda self: None
delay_swigregister = _xcorr_swig.delay_swigregister
delay_swigregister(delay)

def delay_make(itemsize, delay):
    """delay_make(size_t itemsize, int delay) -> delay_sptr"""
    return _xcorr_swig.delay_make(itemsize, delay)

class delay_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::delay)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::delay)> self) -> delay_sptr
        __init__(boost::shared_ptr<(gr::xcorr::delay)> self, delay p) -> delay_sptr
        """
        this = _xcorr_swig.new_delay_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(delay_sptr self) -> delay"""
        return _xcorr_swig.delay_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_delay_sptr
    __del__ = lambda self: None

    def make(self, itemsize, delay):
        """make(delay_sptr self, size_t itemsize, int delay) -> delay_sptr"""
        return _xcorr_swig.delay_sptr_make(self, itemsize, delay)


    def dly(self):
        """dly(delay_sptr self) -> int"""
        return _xcorr_swig.delay_sptr_dly(self)


    def set_dly(self, d):
        """set_dly(delay_sptr self, int d)"""
        return _xcorr_swig.delay_sptr_set_dly(self, d)


    def history(self):
        """history(delay_sptr self) -> unsigned int"""
        return _xcorr_swig.delay_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(delay_sptr self, int which, int delay)
        declare_sample_delay(delay_sptr self, unsigned int delay)
        """
        return _xcorr_swig.delay_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(delay_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.delay_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(delay_sptr self) -> int"""
        return _xcorr_swig.delay_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(delay_sptr self) -> double"""
        return _xcorr_swig.delay_sptr_relative_rate(self)


    def start(self):
        """start(delay_sptr self) -> bool"""
        return _xcorr_swig.delay_sptr_start(self)


    def stop(self):
        """stop(delay_sptr self) -> bool"""
        return _xcorr_swig.delay_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(delay_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.delay_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(delay_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.delay_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(delay_sptr self) -> int"""
        return _xcorr_swig.delay_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(delay_sptr self, int m)"""
        return _xcorr_swig.delay_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(delay_sptr self)"""
        return _xcorr_swig.delay_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(delay_sptr self) -> bool"""
        return _xcorr_swig.delay_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(delay_sptr self, int m)"""
        return _xcorr_swig.delay_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(delay_sptr self) -> int"""
        return _xcorr_swig.delay_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(delay_sptr self, int i) -> long"""
        return _xcorr_swig.delay_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(delay_sptr self, long max_output_buffer)
        set_max_output_buffer(delay_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.delay_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(delay_sptr self, int i) -> long"""
        return _xcorr_swig.delay_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(delay_sptr self, long min_output_buffer)
        set_min_output_buffer(delay_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.delay_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(delay_sptr self) -> float"""
        return _xcorr_swig.delay_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(delay_sptr self) -> float"""
        return _xcorr_swig.delay_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(delay_sptr self) -> float"""
        return _xcorr_swig.delay_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(delay_sptr self) -> float"""
        return _xcorr_swig.delay_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(delay_sptr self) -> float"""
        return _xcorr_swig.delay_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(delay_sptr self) -> float"""
        return _xcorr_swig.delay_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(delay_sptr self, int which) -> float
        pc_input_buffers_full(delay_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.delay_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(delay_sptr self, int which) -> float
        pc_input_buffers_full_avg(delay_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.delay_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(delay_sptr self, int which) -> float
        pc_input_buffers_full_var(delay_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.delay_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(delay_sptr self, int which) -> float
        pc_output_buffers_full(delay_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.delay_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(delay_sptr self, int which) -> float
        pc_output_buffers_full_avg(delay_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.delay_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(delay_sptr self, int which) -> float
        pc_output_buffers_full_var(delay_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.delay_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(delay_sptr self) -> float"""
        return _xcorr_swig.delay_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(delay_sptr self) -> float"""
        return _xcorr_swig.delay_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(delay_sptr self) -> float"""
        return _xcorr_swig.delay_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(delay_sptr self) -> float"""
        return _xcorr_swig.delay_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(delay_sptr self) -> float"""
        return _xcorr_swig.delay_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(delay_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.delay_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(delay_sptr self)"""
        return _xcorr_swig.delay_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(delay_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.delay_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(delay_sptr self) -> int"""
        return _xcorr_swig.delay_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(delay_sptr self) -> int"""
        return _xcorr_swig.delay_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(delay_sptr self, int priority) -> int"""
        return _xcorr_swig.delay_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(delay_sptr self) -> std::string"""
        return _xcorr_swig.delay_sptr_name(self)


    def symbol_name(self):
        """symbol_name(delay_sptr self) -> std::string"""
        return _xcorr_swig.delay_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(delay_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.delay_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(delay_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.delay_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(delay_sptr self) -> long"""
        return _xcorr_swig.delay_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(delay_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.delay_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(delay_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.delay_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(delay_sptr self) -> std::string"""
        return _xcorr_swig.delay_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(delay_sptr self, std::string name)"""
        return _xcorr_swig.delay_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(delay_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.delay_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(delay_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.delay_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(delay_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.delay_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(delay_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.delay_sptr_message_subscribers(self, which_port)

delay_sptr_swigregister = _xcorr_swig.delay_sptr_swigregister
delay_sptr_swigregister(delay_sptr)


delay_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
delay = delay.make;

class message_sink_i(object):
    """Proxy of C++ gr::xcorr::message_sink_i class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> message_sink_i_sptr"""
        return _xcorr_swig.message_sink_i_make()

    make = staticmethod(make)
    __swig_destroy__ = _xcorr_swig.delete_message_sink_i
    __del__ = lambda self: None
message_sink_i_swigregister = _xcorr_swig.message_sink_i_swigregister
message_sink_i_swigregister(message_sink_i)

def message_sink_i_make():
    """message_sink_i_make() -> message_sink_i_sptr"""
    return _xcorr_swig.message_sink_i_make()

class message_sink_i_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::message_sink_i)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::message_sink_i)> self) -> message_sink_i_sptr
        __init__(boost::shared_ptr<(gr::xcorr::message_sink_i)> self, message_sink_i p) -> message_sink_i_sptr
        """
        this = _xcorr_swig.new_message_sink_i_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(message_sink_i_sptr self) -> message_sink_i"""
        return _xcorr_swig.message_sink_i_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_message_sink_i_sptr
    __del__ = lambda self: None

    def make(self):
        """make(message_sink_i_sptr self) -> message_sink_i_sptr"""
        return _xcorr_swig.message_sink_i_sptr_make(self)


    def history(self):
        """history(message_sink_i_sptr self) -> unsigned int"""
        return _xcorr_swig.message_sink_i_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(message_sink_i_sptr self, int which, int delay)
        declare_sample_delay(message_sink_i_sptr self, unsigned int delay)
        """
        return _xcorr_swig.message_sink_i_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(message_sink_i_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.message_sink_i_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(message_sink_i_sptr self) -> int"""
        return _xcorr_swig.message_sink_i_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(message_sink_i_sptr self) -> double"""
        return _xcorr_swig.message_sink_i_sptr_relative_rate(self)


    def start(self):
        """start(message_sink_i_sptr self) -> bool"""
        return _xcorr_swig.message_sink_i_sptr_start(self)


    def stop(self):
        """stop(message_sink_i_sptr self) -> bool"""
        return _xcorr_swig.message_sink_i_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(message_sink_i_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.message_sink_i_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(message_sink_i_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.message_sink_i_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(message_sink_i_sptr self) -> int"""
        return _xcorr_swig.message_sink_i_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(message_sink_i_sptr self, int m)"""
        return _xcorr_swig.message_sink_i_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(message_sink_i_sptr self)"""
        return _xcorr_swig.message_sink_i_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(message_sink_i_sptr self) -> bool"""
        return _xcorr_swig.message_sink_i_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(message_sink_i_sptr self, int m)"""
        return _xcorr_swig.message_sink_i_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(message_sink_i_sptr self) -> int"""
        return _xcorr_swig.message_sink_i_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(message_sink_i_sptr self, int i) -> long"""
        return _xcorr_swig.message_sink_i_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(message_sink_i_sptr self, long max_output_buffer)
        set_max_output_buffer(message_sink_i_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.message_sink_i_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(message_sink_i_sptr self, int i) -> long"""
        return _xcorr_swig.message_sink_i_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(message_sink_i_sptr self, long min_output_buffer)
        set_min_output_buffer(message_sink_i_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.message_sink_i_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(message_sink_i_sptr self) -> float"""
        return _xcorr_swig.message_sink_i_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(message_sink_i_sptr self) -> float"""
        return _xcorr_swig.message_sink_i_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(message_sink_i_sptr self) -> float"""
        return _xcorr_swig.message_sink_i_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(message_sink_i_sptr self) -> float"""
        return _xcorr_swig.message_sink_i_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(message_sink_i_sptr self) -> float"""
        return _xcorr_swig.message_sink_i_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(message_sink_i_sptr self) -> float"""
        return _xcorr_swig.message_sink_i_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(message_sink_i_sptr self, int which) -> float
        pc_input_buffers_full(message_sink_i_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.message_sink_i_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(message_sink_i_sptr self, int which) -> float
        pc_input_buffers_full_avg(message_sink_i_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.message_sink_i_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(message_sink_i_sptr self, int which) -> float
        pc_input_buffers_full_var(message_sink_i_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.message_sink_i_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(message_sink_i_sptr self, int which) -> float
        pc_output_buffers_full(message_sink_i_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.message_sink_i_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(message_sink_i_sptr self, int which) -> float
        pc_output_buffers_full_avg(message_sink_i_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.message_sink_i_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(message_sink_i_sptr self, int which) -> float
        pc_output_buffers_full_var(message_sink_i_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.message_sink_i_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(message_sink_i_sptr self) -> float"""
        return _xcorr_swig.message_sink_i_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(message_sink_i_sptr self) -> float"""
        return _xcorr_swig.message_sink_i_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(message_sink_i_sptr self) -> float"""
        return _xcorr_swig.message_sink_i_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(message_sink_i_sptr self) -> float"""
        return _xcorr_swig.message_sink_i_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(message_sink_i_sptr self) -> float"""
        return _xcorr_swig.message_sink_i_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(message_sink_i_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.message_sink_i_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(message_sink_i_sptr self)"""
        return _xcorr_swig.message_sink_i_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(message_sink_i_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.message_sink_i_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(message_sink_i_sptr self) -> int"""
        return _xcorr_swig.message_sink_i_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(message_sink_i_sptr self) -> int"""
        return _xcorr_swig.message_sink_i_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(message_sink_i_sptr self, int priority) -> int"""
        return _xcorr_swig.message_sink_i_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(message_sink_i_sptr self) -> std::string"""
        return _xcorr_swig.message_sink_i_sptr_name(self)


    def symbol_name(self):
        """symbol_name(message_sink_i_sptr self) -> std::string"""
        return _xcorr_swig.message_sink_i_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(message_sink_i_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.message_sink_i_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(message_sink_i_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.message_sink_i_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(message_sink_i_sptr self) -> long"""
        return _xcorr_swig.message_sink_i_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(message_sink_i_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.message_sink_i_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(message_sink_i_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.message_sink_i_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(message_sink_i_sptr self) -> std::string"""
        return _xcorr_swig.message_sink_i_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(message_sink_i_sptr self, std::string name)"""
        return _xcorr_swig.message_sink_i_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(message_sink_i_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.message_sink_i_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(message_sink_i_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.message_sink_i_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(message_sink_i_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.message_sink_i_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(message_sink_i_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.message_sink_i_sptr_message_subscribers(self, which_port)

message_sink_i_sptr_swigregister = _xcorr_swig.message_sink_i_sptr_swigregister
message_sink_i_sptr_swigregister(message_sink_i_sptr)


message_sink_i_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
message_sink_i = message_sink_i.make;

class message_sink_f(object):
    """Proxy of C++ gr::xcorr::message_sink_f class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> message_sink_f_sptr"""
        return _xcorr_swig.message_sink_f_make()

    make = staticmethod(make)
    __swig_destroy__ = _xcorr_swig.delete_message_sink_f
    __del__ = lambda self: None
message_sink_f_swigregister = _xcorr_swig.message_sink_f_swigregister
message_sink_f_swigregister(message_sink_f)

def message_sink_f_make():
    """message_sink_f_make() -> message_sink_f_sptr"""
    return _xcorr_swig.message_sink_f_make()

class message_sink_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::message_sink_f)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::message_sink_f)> self) -> message_sink_f_sptr
        __init__(boost::shared_ptr<(gr::xcorr::message_sink_f)> self, message_sink_f p) -> message_sink_f_sptr
        """
        this = _xcorr_swig.new_message_sink_f_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(message_sink_f_sptr self) -> message_sink_f"""
        return _xcorr_swig.message_sink_f_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_message_sink_f_sptr
    __del__ = lambda self: None

    def make(self):
        """make(message_sink_f_sptr self) -> message_sink_f_sptr"""
        return _xcorr_swig.message_sink_f_sptr_make(self)


    def history(self):
        """history(message_sink_f_sptr self) -> unsigned int"""
        return _xcorr_swig.message_sink_f_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(message_sink_f_sptr self, int which, int delay)
        declare_sample_delay(message_sink_f_sptr self, unsigned int delay)
        """
        return _xcorr_swig.message_sink_f_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(message_sink_f_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.message_sink_f_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(message_sink_f_sptr self) -> int"""
        return _xcorr_swig.message_sink_f_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(message_sink_f_sptr self) -> double"""
        return _xcorr_swig.message_sink_f_sptr_relative_rate(self)


    def start(self):
        """start(message_sink_f_sptr self) -> bool"""
        return _xcorr_swig.message_sink_f_sptr_start(self)


    def stop(self):
        """stop(message_sink_f_sptr self) -> bool"""
        return _xcorr_swig.message_sink_f_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(message_sink_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.message_sink_f_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(message_sink_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.message_sink_f_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(message_sink_f_sptr self) -> int"""
        return _xcorr_swig.message_sink_f_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(message_sink_f_sptr self, int m)"""
        return _xcorr_swig.message_sink_f_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(message_sink_f_sptr self)"""
        return _xcorr_swig.message_sink_f_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(message_sink_f_sptr self) -> bool"""
        return _xcorr_swig.message_sink_f_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(message_sink_f_sptr self, int m)"""
        return _xcorr_swig.message_sink_f_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(message_sink_f_sptr self) -> int"""
        return _xcorr_swig.message_sink_f_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(message_sink_f_sptr self, int i) -> long"""
        return _xcorr_swig.message_sink_f_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(message_sink_f_sptr self, long max_output_buffer)
        set_max_output_buffer(message_sink_f_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.message_sink_f_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(message_sink_f_sptr self, int i) -> long"""
        return _xcorr_swig.message_sink_f_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(message_sink_f_sptr self, long min_output_buffer)
        set_min_output_buffer(message_sink_f_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.message_sink_f_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(message_sink_f_sptr self) -> float"""
        return _xcorr_swig.message_sink_f_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(message_sink_f_sptr self) -> float"""
        return _xcorr_swig.message_sink_f_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(message_sink_f_sptr self) -> float"""
        return _xcorr_swig.message_sink_f_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(message_sink_f_sptr self) -> float"""
        return _xcorr_swig.message_sink_f_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(message_sink_f_sptr self) -> float"""
        return _xcorr_swig.message_sink_f_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(message_sink_f_sptr self) -> float"""
        return _xcorr_swig.message_sink_f_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(message_sink_f_sptr self, int which) -> float
        pc_input_buffers_full(message_sink_f_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.message_sink_f_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(message_sink_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(message_sink_f_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.message_sink_f_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(message_sink_f_sptr self, int which) -> float
        pc_input_buffers_full_var(message_sink_f_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.message_sink_f_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(message_sink_f_sptr self, int which) -> float
        pc_output_buffers_full(message_sink_f_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.message_sink_f_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(message_sink_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(message_sink_f_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.message_sink_f_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(message_sink_f_sptr self, int which) -> float
        pc_output_buffers_full_var(message_sink_f_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.message_sink_f_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(message_sink_f_sptr self) -> float"""
        return _xcorr_swig.message_sink_f_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(message_sink_f_sptr self) -> float"""
        return _xcorr_swig.message_sink_f_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(message_sink_f_sptr self) -> float"""
        return _xcorr_swig.message_sink_f_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(message_sink_f_sptr self) -> float"""
        return _xcorr_swig.message_sink_f_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(message_sink_f_sptr self) -> float"""
        return _xcorr_swig.message_sink_f_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(message_sink_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.message_sink_f_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(message_sink_f_sptr self)"""
        return _xcorr_swig.message_sink_f_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(message_sink_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.message_sink_f_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(message_sink_f_sptr self) -> int"""
        return _xcorr_swig.message_sink_f_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(message_sink_f_sptr self) -> int"""
        return _xcorr_swig.message_sink_f_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(message_sink_f_sptr self, int priority) -> int"""
        return _xcorr_swig.message_sink_f_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(message_sink_f_sptr self) -> std::string"""
        return _xcorr_swig.message_sink_f_sptr_name(self)


    def symbol_name(self):
        """symbol_name(message_sink_f_sptr self) -> std::string"""
        return _xcorr_swig.message_sink_f_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(message_sink_f_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.message_sink_f_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(message_sink_f_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.message_sink_f_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(message_sink_f_sptr self) -> long"""
        return _xcorr_swig.message_sink_f_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(message_sink_f_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.message_sink_f_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(message_sink_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.message_sink_f_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(message_sink_f_sptr self) -> std::string"""
        return _xcorr_swig.message_sink_f_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(message_sink_f_sptr self, std::string name)"""
        return _xcorr_swig.message_sink_f_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(message_sink_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.message_sink_f_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(message_sink_f_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.message_sink_f_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(message_sink_f_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.message_sink_f_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(message_sink_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.message_sink_f_sptr_message_subscribers(self, which_port)

message_sink_f_sptr_swigregister = _xcorr_swig.message_sink_f_sptr_swigregister
message_sink_f_sptr_swigregister(message_sink_f_sptr)


message_sink_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
message_sink_f = message_sink_f.make;

class add_const_ff(object):
    """Proxy of C++ gr::xcorr::add_const_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make():
        """make() -> add_const_ff_sptr"""
        return _xcorr_swig.add_const_ff_make()

    make = staticmethod(make)

    def set_const(self, k):
        """set_const(add_const_ff self, float k)"""
        return _xcorr_swig.add_const_ff_set_const(self, k)

    __swig_destroy__ = _xcorr_swig.delete_add_const_ff
    __del__ = lambda self: None
add_const_ff_swigregister = _xcorr_swig.add_const_ff_swigregister
add_const_ff_swigregister(add_const_ff)

def add_const_ff_make():
    """add_const_ff_make() -> add_const_ff_sptr"""
    return _xcorr_swig.add_const_ff_make()

class add_const_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::add_const_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::add_const_ff)> self) -> add_const_ff_sptr
        __init__(boost::shared_ptr<(gr::xcorr::add_const_ff)> self, add_const_ff p) -> add_const_ff_sptr
        """
        this = _xcorr_swig.new_add_const_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(add_const_ff_sptr self) -> add_const_ff"""
        return _xcorr_swig.add_const_ff_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_add_const_ff_sptr
    __del__ = lambda self: None

    def make(self):
        """make(add_const_ff_sptr self) -> add_const_ff_sptr"""
        return _xcorr_swig.add_const_ff_sptr_make(self)


    def set_const(self, k):
        """set_const(add_const_ff_sptr self, float k)"""
        return _xcorr_swig.add_const_ff_sptr_set_const(self, k)


    def history(self):
        """history(add_const_ff_sptr self) -> unsigned int"""
        return _xcorr_swig.add_const_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_ff_sptr self, int which, int delay)
        declare_sample_delay(add_const_ff_sptr self, unsigned int delay)
        """
        return _xcorr_swig.add_const_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(add_const_ff_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.add_const_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(add_const_ff_sptr self) -> int"""
        return _xcorr_swig.add_const_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(add_const_ff_sptr self) -> double"""
        return _xcorr_swig.add_const_ff_sptr_relative_rate(self)


    def start(self):
        """start(add_const_ff_sptr self) -> bool"""
        return _xcorr_swig.add_const_ff_sptr_start(self)


    def stop(self):
        """stop(add_const_ff_sptr self) -> bool"""
        return _xcorr_swig.add_const_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(add_const_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.add_const_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(add_const_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.add_const_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(add_const_ff_sptr self) -> int"""
        return _xcorr_swig.add_const_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(add_const_ff_sptr self, int m)"""
        return _xcorr_swig.add_const_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_ff_sptr self)"""
        return _xcorr_swig.add_const_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_ff_sptr self) -> bool"""
        return _xcorr_swig.add_const_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(add_const_ff_sptr self, int m)"""
        return _xcorr_swig.add_const_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(add_const_ff_sptr self) -> int"""
        return _xcorr_swig.add_const_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(add_const_ff_sptr self, int i) -> long"""
        return _xcorr_swig.add_const_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_ff_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.add_const_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(add_const_ff_sptr self, int i) -> long"""
        return _xcorr_swig.add_const_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_ff_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.add_const_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(add_const_ff_sptr self) -> float"""
        return _xcorr_swig.add_const_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_ff_sptr self) -> float"""
        return _xcorr_swig.add_const_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_ff_sptr self) -> float"""
        return _xcorr_swig.add_const_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(add_const_ff_sptr self) -> float"""
        return _xcorr_swig.add_const_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_ff_sptr self) -> float"""
        return _xcorr_swig.add_const_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_ff_sptr self) -> float"""
        return _xcorr_swig.add_const_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_ff_sptr self, int which) -> float
        pc_input_buffers_full(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.add_const_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.add_const_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.add_const_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_ff_sptr self, int which) -> float
        pc_output_buffers_full(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.add_const_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.add_const_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.add_const_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(add_const_ff_sptr self) -> float"""
        return _xcorr_swig.add_const_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_ff_sptr self) -> float"""
        return _xcorr_swig.add_const_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(add_const_ff_sptr self) -> float"""
        return _xcorr_swig.add_const_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(add_const_ff_sptr self) -> float"""
        return _xcorr_swig.add_const_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(add_const_ff_sptr self) -> float"""
        return _xcorr_swig.add_const_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(add_const_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.add_const_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_ff_sptr self)"""
        return _xcorr_swig.add_const_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(add_const_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.add_const_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(add_const_ff_sptr self) -> int"""
        return _xcorr_swig.add_const_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(add_const_ff_sptr self) -> int"""
        return _xcorr_swig.add_const_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(add_const_ff_sptr self, int priority) -> int"""
        return _xcorr_swig.add_const_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(add_const_ff_sptr self) -> std::string"""
        return _xcorr_swig.add_const_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(add_const_ff_sptr self) -> std::string"""
        return _xcorr_swig.add_const_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(add_const_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.add_const_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(add_const_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.add_const_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(add_const_ff_sptr self) -> long"""
        return _xcorr_swig.add_const_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(add_const_ff_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.add_const_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(add_const_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.add_const_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(add_const_ff_sptr self) -> std::string"""
        return _xcorr_swig.add_const_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(add_const_ff_sptr self, std::string name)"""
        return _xcorr_swig.add_const_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(add_const_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.add_const_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(add_const_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.add_const_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(add_const_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.add_const_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(add_const_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.add_const_ff_sptr_message_subscribers(self, which_port)

add_const_ff_sptr_swigregister = _xcorr_swig.add_const_ff_sptr_swigregister
add_const_ff_sptr_swigregister(add_const_ff_sptr)


add_const_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_ff = add_const_ff.make;

class phase2xcorr_ff(object):
    """Proxy of C++ gr::xcorr::phase2xcorr_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(alpha):
        """make(float alpha) -> phase2xcorr_ff_sptr"""
        return _xcorr_swig.phase2xcorr_ff_make(alpha)

    make = staticmethod(make)
    __swig_destroy__ = _xcorr_swig.delete_phase2xcorr_ff
    __del__ = lambda self: None
phase2xcorr_ff_swigregister = _xcorr_swig.phase2xcorr_ff_swigregister
phase2xcorr_ff_swigregister(phase2xcorr_ff)

def phase2xcorr_ff_make(alpha):
    """phase2xcorr_ff_make(float alpha) -> phase2xcorr_ff_sptr"""
    return _xcorr_swig.phase2xcorr_ff_make(alpha)

class phase2xcorr_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::phase2xcorr_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::phase2xcorr_ff)> self) -> phase2xcorr_ff_sptr
        __init__(boost::shared_ptr<(gr::xcorr::phase2xcorr_ff)> self, phase2xcorr_ff p) -> phase2xcorr_ff_sptr
        """
        this = _xcorr_swig.new_phase2xcorr_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(phase2xcorr_ff_sptr self) -> phase2xcorr_ff"""
        return _xcorr_swig.phase2xcorr_ff_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_phase2xcorr_ff_sptr
    __del__ = lambda self: None

    def make(self, alpha):
        """make(phase2xcorr_ff_sptr self, float alpha) -> phase2xcorr_ff_sptr"""
        return _xcorr_swig.phase2xcorr_ff_sptr_make(self, alpha)


    def history(self):
        """history(phase2xcorr_ff_sptr self) -> unsigned int"""
        return _xcorr_swig.phase2xcorr_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(phase2xcorr_ff_sptr self, int which, int delay)
        declare_sample_delay(phase2xcorr_ff_sptr self, unsigned int delay)
        """
        return _xcorr_swig.phase2xcorr_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(phase2xcorr_ff_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.phase2xcorr_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(phase2xcorr_ff_sptr self) -> int"""
        return _xcorr_swig.phase2xcorr_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(phase2xcorr_ff_sptr self) -> double"""
        return _xcorr_swig.phase2xcorr_ff_sptr_relative_rate(self)


    def start(self):
        """start(phase2xcorr_ff_sptr self) -> bool"""
        return _xcorr_swig.phase2xcorr_ff_sptr_start(self)


    def stop(self):
        """stop(phase2xcorr_ff_sptr self) -> bool"""
        return _xcorr_swig.phase2xcorr_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(phase2xcorr_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.phase2xcorr_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(phase2xcorr_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.phase2xcorr_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(phase2xcorr_ff_sptr self) -> int"""
        return _xcorr_swig.phase2xcorr_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(phase2xcorr_ff_sptr self, int m)"""
        return _xcorr_swig.phase2xcorr_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(phase2xcorr_ff_sptr self)"""
        return _xcorr_swig.phase2xcorr_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(phase2xcorr_ff_sptr self) -> bool"""
        return _xcorr_swig.phase2xcorr_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(phase2xcorr_ff_sptr self, int m)"""
        return _xcorr_swig.phase2xcorr_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(phase2xcorr_ff_sptr self) -> int"""
        return _xcorr_swig.phase2xcorr_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(phase2xcorr_ff_sptr self, int i) -> long"""
        return _xcorr_swig.phase2xcorr_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(phase2xcorr_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(phase2xcorr_ff_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.phase2xcorr_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(phase2xcorr_ff_sptr self, int i) -> long"""
        return _xcorr_swig.phase2xcorr_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(phase2xcorr_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(phase2xcorr_ff_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.phase2xcorr_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(phase2xcorr_ff_sptr self) -> float"""
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(phase2xcorr_ff_sptr self) -> float"""
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(phase2xcorr_ff_sptr self) -> float"""
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(phase2xcorr_ff_sptr self) -> float"""
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(phase2xcorr_ff_sptr self) -> float"""
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(phase2xcorr_ff_sptr self) -> float"""
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(phase2xcorr_ff_sptr self, int which) -> float
        pc_input_buffers_full(phase2xcorr_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(phase2xcorr_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(phase2xcorr_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(phase2xcorr_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(phase2xcorr_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(phase2xcorr_ff_sptr self, int which) -> float
        pc_output_buffers_full(phase2xcorr_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(phase2xcorr_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(phase2xcorr_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(phase2xcorr_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(phase2xcorr_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(phase2xcorr_ff_sptr self) -> float"""
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(phase2xcorr_ff_sptr self) -> float"""
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(phase2xcorr_ff_sptr self) -> float"""
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(phase2xcorr_ff_sptr self) -> float"""
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(phase2xcorr_ff_sptr self) -> float"""
        return _xcorr_swig.phase2xcorr_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(phase2xcorr_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.phase2xcorr_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(phase2xcorr_ff_sptr self)"""
        return _xcorr_swig.phase2xcorr_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(phase2xcorr_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.phase2xcorr_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(phase2xcorr_ff_sptr self) -> int"""
        return _xcorr_swig.phase2xcorr_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(phase2xcorr_ff_sptr self) -> int"""
        return _xcorr_swig.phase2xcorr_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(phase2xcorr_ff_sptr self, int priority) -> int"""
        return _xcorr_swig.phase2xcorr_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(phase2xcorr_ff_sptr self) -> std::string"""
        return _xcorr_swig.phase2xcorr_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(phase2xcorr_ff_sptr self) -> std::string"""
        return _xcorr_swig.phase2xcorr_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(phase2xcorr_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.phase2xcorr_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(phase2xcorr_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.phase2xcorr_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(phase2xcorr_ff_sptr self) -> long"""
        return _xcorr_swig.phase2xcorr_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(phase2xcorr_ff_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.phase2xcorr_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(phase2xcorr_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.phase2xcorr_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(phase2xcorr_ff_sptr self) -> std::string"""
        return _xcorr_swig.phase2xcorr_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(phase2xcorr_ff_sptr self, std::string name)"""
        return _xcorr_swig.phase2xcorr_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(phase2xcorr_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.phase2xcorr_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(phase2xcorr_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.phase2xcorr_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(phase2xcorr_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.phase2xcorr_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(phase2xcorr_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.phase2xcorr_ff_sptr_message_subscribers(self, which_port)

phase2xcorr_ff_sptr_swigregister = _xcorr_swig.phase2xcorr_ff_sptr_swigregister
phase2xcorr_ff_sptr_swigregister(phase2xcorr_ff_sptr)


phase2xcorr_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
phase2xcorr_ff = phase2xcorr_ff.make;

class hold_state_ff(object):
    """Proxy of C++ gr::xcorr::hold_state_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(state, scale0, scale1):
        """make(int state, float scale0, float scale1) -> hold_state_ff_sptr"""
        return _xcorr_swig.hold_state_ff_make(state, scale0, scale1)

    make = staticmethod(make)

    def set_state(self, new_state):
        """set_state(hold_state_ff self, int new_state)"""
        return _xcorr_swig.hold_state_ff_set_state(self, new_state)

    __swig_destroy__ = _xcorr_swig.delete_hold_state_ff
    __del__ = lambda self: None
hold_state_ff_swigregister = _xcorr_swig.hold_state_ff_swigregister
hold_state_ff_swigregister(hold_state_ff)

def hold_state_ff_make(state, scale0, scale1):
    """hold_state_ff_make(int state, float scale0, float scale1) -> hold_state_ff_sptr"""
    return _xcorr_swig.hold_state_ff_make(state, scale0, scale1)

class hold_state_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::xcorr::hold_state_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::xcorr::hold_state_ff)> self) -> hold_state_ff_sptr
        __init__(boost::shared_ptr<(gr::xcorr::hold_state_ff)> self, hold_state_ff p) -> hold_state_ff_sptr
        """
        this = _xcorr_swig.new_hold_state_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(hold_state_ff_sptr self) -> hold_state_ff"""
        return _xcorr_swig.hold_state_ff_sptr___deref__(self)

    __swig_destroy__ = _xcorr_swig.delete_hold_state_ff_sptr
    __del__ = lambda self: None

    def make(self, state, scale0, scale1):
        """make(hold_state_ff_sptr self, int state, float scale0, float scale1) -> hold_state_ff_sptr"""
        return _xcorr_swig.hold_state_ff_sptr_make(self, state, scale0, scale1)


    def set_state(self, new_state):
        """set_state(hold_state_ff_sptr self, int new_state)"""
        return _xcorr_swig.hold_state_ff_sptr_set_state(self, new_state)


    def history(self):
        """history(hold_state_ff_sptr self) -> unsigned int"""
        return _xcorr_swig.hold_state_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(hold_state_ff_sptr self, int which, int delay)
        declare_sample_delay(hold_state_ff_sptr self, unsigned int delay)
        """
        return _xcorr_swig.hold_state_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(hold_state_ff_sptr self, int which) -> unsigned int"""
        return _xcorr_swig.hold_state_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(hold_state_ff_sptr self) -> int"""
        return _xcorr_swig.hold_state_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(hold_state_ff_sptr self) -> double"""
        return _xcorr_swig.hold_state_ff_sptr_relative_rate(self)


    def start(self):
        """start(hold_state_ff_sptr self) -> bool"""
        return _xcorr_swig.hold_state_ff_sptr_start(self)


    def stop(self):
        """stop(hold_state_ff_sptr self) -> bool"""
        return _xcorr_swig.hold_state_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(hold_state_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _xcorr_swig.hold_state_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(hold_state_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _xcorr_swig.hold_state_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(hold_state_ff_sptr self) -> int"""
        return _xcorr_swig.hold_state_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(hold_state_ff_sptr self, int m)"""
        return _xcorr_swig.hold_state_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(hold_state_ff_sptr self)"""
        return _xcorr_swig.hold_state_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(hold_state_ff_sptr self) -> bool"""
        return _xcorr_swig.hold_state_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(hold_state_ff_sptr self, int m)"""
        return _xcorr_swig.hold_state_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(hold_state_ff_sptr self) -> int"""
        return _xcorr_swig.hold_state_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(hold_state_ff_sptr self, int i) -> long"""
        return _xcorr_swig.hold_state_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(hold_state_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(hold_state_ff_sptr self, int port, long max_output_buffer)
        """
        return _xcorr_swig.hold_state_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(hold_state_ff_sptr self, int i) -> long"""
        return _xcorr_swig.hold_state_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(hold_state_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(hold_state_ff_sptr self, int port, long min_output_buffer)
        """
        return _xcorr_swig.hold_state_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(hold_state_ff_sptr self) -> float"""
        return _xcorr_swig.hold_state_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(hold_state_ff_sptr self) -> float"""
        return _xcorr_swig.hold_state_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(hold_state_ff_sptr self) -> float"""
        return _xcorr_swig.hold_state_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(hold_state_ff_sptr self) -> float"""
        return _xcorr_swig.hold_state_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(hold_state_ff_sptr self) -> float"""
        return _xcorr_swig.hold_state_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(hold_state_ff_sptr self) -> float"""
        return _xcorr_swig.hold_state_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(hold_state_ff_sptr self, int which) -> float
        pc_input_buffers_full(hold_state_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_state_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(hold_state_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(hold_state_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_state_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(hold_state_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(hold_state_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_state_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(hold_state_ff_sptr self, int which) -> float
        pc_output_buffers_full(hold_state_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_state_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(hold_state_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(hold_state_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_state_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(hold_state_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(hold_state_ff_sptr self) -> pmt_vector_float
        """
        return _xcorr_swig.hold_state_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(hold_state_ff_sptr self) -> float"""
        return _xcorr_swig.hold_state_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(hold_state_ff_sptr self) -> float"""
        return _xcorr_swig.hold_state_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(hold_state_ff_sptr self) -> float"""
        return _xcorr_swig.hold_state_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(hold_state_ff_sptr self) -> float"""
        return _xcorr_swig.hold_state_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(hold_state_ff_sptr self) -> float"""
        return _xcorr_swig.hold_state_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(hold_state_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _xcorr_swig.hold_state_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(hold_state_ff_sptr self)"""
        return _xcorr_swig.hold_state_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(hold_state_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _xcorr_swig.hold_state_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(hold_state_ff_sptr self) -> int"""
        return _xcorr_swig.hold_state_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(hold_state_ff_sptr self) -> int"""
        return _xcorr_swig.hold_state_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(hold_state_ff_sptr self, int priority) -> int"""
        return _xcorr_swig.hold_state_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(hold_state_ff_sptr self) -> std::string"""
        return _xcorr_swig.hold_state_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(hold_state_ff_sptr self) -> std::string"""
        return _xcorr_swig.hold_state_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(hold_state_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.hold_state_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(hold_state_ff_sptr self) -> io_signature_sptr"""
        return _xcorr_swig.hold_state_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(hold_state_ff_sptr self) -> long"""
        return _xcorr_swig.hold_state_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(hold_state_ff_sptr self) -> basic_block_sptr"""
        return _xcorr_swig.hold_state_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(hold_state_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _xcorr_swig.hold_state_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(hold_state_ff_sptr self) -> std::string"""
        return _xcorr_swig.hold_state_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(hold_state_ff_sptr self, std::string name)"""
        return _xcorr_swig.hold_state_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(hold_state_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _xcorr_swig.hold_state_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(hold_state_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.hold_state_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(hold_state_ff_sptr self) -> swig_int_ptr"""
        return _xcorr_swig.hold_state_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(hold_state_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _xcorr_swig.hold_state_ff_sptr_message_subscribers(self, which_port)

hold_state_ff_sptr_swigregister = _xcorr_swig.hold_state_ff_sptr_swigregister
hold_state_ff_sptr_swigregister(hold_state_ff_sptr)


hold_state_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
hold_state_ff = hold_state_ff.make;



